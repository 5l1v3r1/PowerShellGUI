<File version="2">
  <FileID>f077ab29-3478-4ca6-943e-b46629525923</FileID>
  <Preview>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
IU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAA
EEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDi
hDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAh
hBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4I
AwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEII
IU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAA
EEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDi
hDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAh
hBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4I
AwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEII
IU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAA
EEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDi
hDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAh
hBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4I
AwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEII
IU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAA
EEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDihDAAEEIIIU4IAwAhhBDi
hDAAEEIIIU4IAwAhhBDihNziABB7YbWEEEIIuZ3csgAQHp8F7+N+CA6JpJRSSultNEj08DyJiMTc
mxsA8mubEBqbBlfXvdi33w379lFKKaX0lit98N59B7Bjxy6kpKShtNYsfbbpkj77Nw4AzQiTALB+
3RrMmDEdkyZN0pxMKaWU0lvmhAkTtP7Xz88Xra0tqDe3Ia3UcEmf/ZsHgIj4DCxcMB/Tpk3DyZMn
ceLECRw/fpxSSimlt0gvLy/tMT8/Hx3t7ajSNSH9VgSAuXPnYO3atejo6EC7rLi1tZVSSimlt9iq
qio026y3LgDMmzcXq1atgslkgtFohF6vp5RSSukttqKiAs1NNgYASiml1JlkAKCUUkqdUAYASiml
1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYA
Siml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqd
UAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCU
UkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1All
AKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml
1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYA
Siml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqd
UAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCU
UkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1All
AKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml1AllAKCUUkqdUAYASiml
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
vou/saHgjFW7gW/FODPOr1TtYJRlG7HF1yh1sNfj24/b0JyirkrocL5Gh/elHDW9n5jippYxoEGW
2bPbBNehMp/ZpN0DcD7LgOXSHrq0n9tj6SAr4vbIPC1G6AwMAJRSejtUl/3Vd/zV5f7Oz/zVZ/2K
zs/8VcevaG9v1+a7PQHAqEdtrR7RMUaESUcaEiKdbbDdiDATYqLlMdqIkFATQuW1CJknMsqEKDFE
/h0qBl9YJkLmSYozoTDbiL+tMePTCbL+k02IjjciWsqxa0SUepTlO593rkOV2zlNGRkp64qwT1Pr
i5R1dS4XpV6X16JknnAxQlTl2Je1z6OVoZaT+bTXYo0IlW3S6iplRcn0zvK7rksr/xrru3z+znX8
PK/9uSpDe73LcrFSh6go48U2U+0drdVd2qFL/cJEVZ6adnlbqOfXql9xsUH7WwWXH5SUUkpvrqpz
V5/rq8/96+rqtOfqM391qb/z834VCtT3/5WNjY0XlrsNHwG0tuqQnGzEk0+04ZFH2i+x20PtuP+B
djz0oP35w+JDD8v0bu14UKY/Iq93zvvoozJNHv/XH9rx3/9bB/7x7zvwH3/swIP3t+MBmVd5/4V/
PyTLq7I7pykflmkPqWmyLm0+Ua2nm6xPzfegTH9Iyu98XZWr6vKgWk69Jo/qNbXc5etS86h/d5PX
H5FlVH3VurRtUevssi61veq52r6u61PTtPVdmF8tr9VNLavWr/7ddVn1XK23y3IXy5Hpne2m2vTi
NslynfVT01W9O5e5on5qnV2XFbX1yHx79lgkVfIKAKWU3kpV565G/uoHftTn++rGPzXCVzf7qc/8
1WV/NfJXYcDNzQ0HDhzQ7gew/yLgbQgA6gpAXZ1eCwGJib/eFFk+NN2IZ8ZZ8c+/k05oaBsKM81I
TDE4nJ/ePMvKZP9e+BonpZTSW2NnAFCf7asf+VHf81ckJSVpz9V09fU/FQD27dunBQC1nLpR8LZ8
BKB+rld1Fi0tOu1qwH9G9Wt8GeV6JMUa0VhiRHub/QoDvbWazfb92vXApJRSevNVIaDzcr+641+p
/q2mqXCgrgioy/7qIwI1v3qupt+WAPBbqn7tTv10cFu7/bfw1Z/NdTQfpZRSeq+qbgJsarLBarVI
X2v/q3+2C3f7m0zqN2AM2rcD1Mhfu/wvy9yyjwBKJQBofypXVkgppZTS31gZ0atRvXq0P1fhoMtz
UT23T7Nfib/pAUA9z600olhCgFoZpZRSSm+z0ifnVtj76Ev67N8yAGgFiiplUEoppfTO0GF/LdN/
0wBAKaWU0jtfBgBKKaXUCWUAoJRSSp3QXx0AiiUAaJ8rUEoppfSuM6PUiLIbCgB9+jaWlNeisQla
cqCUUkrpXWhjGwwtgBrUX1cA+Prrb5sjohOQnVuipQZKKaWU3p2qzj84JBKfffZZ3YVu/up8/PHH
qV9++WWJSguUUkopvbv96quvSj766KOoC908IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhNwj/O53/z9Xl3FYbETyeAAAAABJRU5ErkJggg==</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formADUnlocker" children="Controls">
    <Property name="ClientSize">451, 332</Property>
    <Property name="MinimumSize">467, 371</Property>
    <Property name="Name">formADUnlocker</Property>
    <Property name="Text">AD Unlocker</Property>
    <Event name="Load">formADUnlocker_Load</Event>
    <Object type="System.Windows.Forms.ListView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="listview1" children="Controls">
      <Property name="Columns">
        <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="columnheader_SamAccountName" />
        </Item>
        <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="columnheader_isLockedOut" />
        </Item>
        <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="columnheader_Description" />
        </Item>
        <Item type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="columnheader_DN" />
        </Item>
      </Property>
      <Property name="Dock">Fill</Property>
      <Property name="Location">0, 59</Property>
      <Property name="Name">listview1</Property>
      <Property name="Size">451, 170</Property>
      <Property name="Sorting">Ascending</Property>
      <Property name="TabIndex">7</Property>
      <Property name="UseCompatibleStateImageBehavior">False</Property>
      <Property name="View">Details</Property>
    </Object>
    <Object type="System.Windows.Forms.RichTextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="richtextbox1" children="Controls">
      <Property name="Dock">Bottom</Property>
      <Property name="Location">0, 229</Property>
      <Property name="Name">richtextbox1</Property>
      <Property name="Size">451, 81</Property>
      <Property name="TabIndex">3</Property>
      <Property name="Text">
      </Property>
    </Object>
    <Object type="System.Windows.Forms.GroupBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="groupbox1" children="Controls">
      <Property name="Dock">Top</Property>
      <Property name="Location">0, 0</Property>
      <Property name="Name">groupbox1</Property>
      <Property name="Size">451, 59</Property>
      <Property name="TabIndex">6</Property>
      <Property name="TabStop">False</Property>
      <Property name="Text">Enter the Username</Property>
      <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textboxComputerName" children="Controls">
        <Property name="Font">Microsoft Sans Serif, 12pt, style=Bold</Property>
        <Property name="Location">6, 17</Property>
        <Property name="Name">textboxComputerName</Property>
        <Property name="Size">276, 26</Property>
        <Property name="TabIndex">0</Property>
        <Event name="TextChanged">textboxComputerName_TextChanged</Event>
        <Event name="VisibleChanged">textboxComputerName_VisibleChanged</Event>
        <Event name="Enter">textboxComputerName_Enter</Event>
        <Event name="Leave">textboxComputerName_Leave</Event>
      </Object>
      <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonCheck" children="Controls">
        <Property name="Enabled">False</Property>
        <Property name="Location">288, 19</Property>
        <Property name="Name">buttonCheck</Property>
        <Property name="Size">56, 23</Property>
        <Property name="TabIndex">1</Property>
        <Property name="Text">Check</Property>
        <Property name="UseVisualStyleBackColor">True</Property>
        <Event name="Click">buttonCheck_Click</Event>
      </Object>
      <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonUnlock" children="Controls">
        <Property name="Enabled">False</Property>
        <Property name="Location">383, 19</Property>
        <Property name="Name">buttonUnlock</Property>
        <Property name="Size">56, 23</Property>
        <Property name="TabIndex">2</Property>
        <Property name="Text">Unlock</Property>
        <Property name="UseVisualStyleBackColor">True</Property>
        <Event name="Click">buttonUnlock_Click</Event>
      </Object>
    </Object>
    <Object type="System.Windows.Forms.StatusStrip, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="statusstrip1" children="Controls">
      <Property name="Items">
        <Item type="System.Windows.Forms.ToolStripStatusLabel, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="toolstripstatuslabelLazyWinAdminLink" />
        </Item>
      </Property>
      <Property name="Location">0, 310</Property>
      <Property name="Name">statusstrip1</Property>
      <Property name="Size">451, 22</Property>
      <Property name="TabIndex">5</Property>
      <Property name="Text">statusstrip1</Property>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.ToolStripStatusLabel, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="toolstripstatuslabelLazyWinAdminLink">
    <Property name="IsLink">True</Property>
    <Property name="Name">toolstripstatuslabelLazyWinAdminLink</Property>
    <Property name="Size">114, 17</Property>
    <Property name="Text">LazyWinAdmin.com</Property>
    <Property name="TextDirection">Horizontal</Property>
    <Event name="Click">toolstripstatuslabelLazyWinAdminLink_Click</Event>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnheader_SamAccountName">
    <Property name="Text">SamAccountName</Property>
    <Property name="Width">133</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnheader_isLockedOut">
    <Property name="Text">isLockedOut</Property>
    <Property name="Width">109</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnheader_Description">
    <Property name="Text">Description</Property>
    <Property name="Width">118</Property>
  </Object>
  <Object type="System.Windows.Forms.ColumnHeader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="columnheader_DN">
    <Property name="Text">DN</Property>
    <Property name="Width">85</Property>
  </Object>
  <Code><![CDATA[

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add modules and custom code to validate the application load
	
	return $true #return true for success or false for failure
}


function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload modules when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

$formADUnlocker_Load = {
	
	# Set text
	$textboxComputerName.Tag = 'Please enter an username here'
	$textBoxComputerName.ForeColor = 'LightGray'
	$textBoxComputerName.Text = $textboxComputerName.Tag
}

#region Control Helper Functions
function Load-ListBox 
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.

	.PARAMETER  ListBox
		The ListBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ListBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ListBox $listBox1 "Red" -Append
		Load-ListBox $listBox1 "White" -Append
		Load-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Load-ListBox $listBox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListBox]$ListBox,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
	    [Parameter(Mandatory=$false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if(-not $Append)
	{
		$listBox.Items.Clear()	
	}
	
	if($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)	
	}

	$listBox.DisplayMember = $DisplayMember	
}

function Sort-ListViewColumn 
{
	<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.

	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.

	.PARAMETER ListView
		The ListView control to sort.

	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
		
	.PARAMETER  SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
#>
	param(	
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ListView]$ListView,
			[Parameter(Mandatory=$true)]
			[int]$ColumnIndex,
			[System.Windows.Forms.SortOrder]$SortOrder = 'None')
	
	if(($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
		try{
		$local:type = [ListViewItemComparer]
	}
	catch{
	Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@  | Out-Null
	}
	#endregion
	
	if($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort()#Sort the items
	}
	else
	{
		if($Sort -eq [System.Windows.Forms.SortOrder]::None)
		{
			$Sort = [System.Windows.Forms.SortOrder]::Ascending	
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder) 
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}

function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	[System.Windows.Forms.ListViewGroup]$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
	}
	
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($Group -ne $null)
			{
				$listitem.Group = $Group
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($SubItems -ne $null)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($Group -ne $null)
		{
			$listitem.Group = $Group
		}
	}
}

function Append-Richtextbox
{
	<#
		.SYNOPSIS
			This function Append text to a RichTextBox
		.DESCRIPTION
			This function Append text to a RichTextBox
		.PARAMETER Richtextbox
			Specify the RichTextBox Control to use
		.PARAMETER Message
			Specify the Message to show
		.PARAMETER MessageColor
			Specify the Color to use for the Message
		.PARAMETER Source
			Specify the Source type of the Message
		.PARAMETER SourceColor
			Specify the Source type color to use
		.PARAMETER ComputerName
			Specify the ComputerName on which the message apply (nothing is done on a remote computer, it's just an informational parameter)
		.PARAMETER ComputerNameColor
			Specify the ComputerName color to use
		.EXAMPLE
			Append-Richtextbox -RichTextBox $RichTextBox1 -Message "Hello World"
		.EXAMPLE
			Append-Richtextbox -RichTextBox $RichTextBox1 -Message "Some info" -Source "Get-TSSession" -ComputerName "RemoteServe01"
		.NOTES
			Francois-Xavier Cat
			@lazywinadm
			www.lazywinadmin.com
	
			VERSION HISTORY
				1.0 2014/04/16 Initial Version
	#>
	[CmdletBinding()]
	PARAM (
		[ValidateNotNull()]
		[Parameter(Mandatory)]
		[System.Windows.Forms.Richtextbox]$RichTextBox,
		[Parameter(Mandatory)]
		[string]$Message,
		[string]$MessageColor = "DarkGreen",
		[string]$DateTimeColor = "Black",
		[string]$Source,
		[string]$SourceColor = "Gray",
		[string]$ComputerName,
		[String]$ComputerNameColor = "Blue")
	
	BEGIN
	{
		# Get current date/time
		$SortableTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
	}
	PROCESS
	{
		TRY
		{
			# Add the Date/Time
			$RichTextBox.SelectionColor = $DateTimeColor
			$RichTextBox.AppendText("[$SortableTime] ")
			
			
			IF ($PSBoundParameters['ComputerName'])
			{
				# Add ComputerName
				$RichTextBox.SelectionColor = $ComputerNameColor
				$RichTextBox.AppendText(("$ComputerName ").ToUpper())
			}
			
			IF ($PSBoundParameters['Source'])
			{
				# Add Source
				$RichTextBox.SelectionColor = $SourceColor
				$RichTextBox.AppendText("$Source ")
			}
			
			# Add Message with a return character
			$RichTextBox.SelectionColor = $MessageColor
			$RichTextBox.AppendText("$Message`r")
			Write-Verbose -Message "$SortableTime $Message"
		}
		CATCH
		{
			Write-Error -Message "PROCESS - Error while writing inside the RichTextBox"
		}
	}
	END
	{
		# Refresh RichTextBox
		$RichTextBox.Refresh()
		
		# Scroll to the end of the RichTextBox
		$RichTextBox.ScrollToCaret()
	}
}

function Get-ListBoxItem
{
	<#
		.SYNOPSIS
			Function to get item(s) from a ListBox Control

		.DESCRIPTION
			Function to get item(s) from a ListBox Control

		.NOTES
			Author: Francois-Xavier Cat
			Twitter:@LazyWinAdm
			WWW: 	lazywinadmin.com
		
			VERSION HISTORY
				1.0	2014/04/15	Initial Version
	#>
	#Requires -Version 3
	PARAM (
		[ValidateNotNull()]
		[Parameter(
				   ParameterSetName = "All",
				   Mandatory)]
		[Parameter(
				   ParameterSetName = "Selected",
				   Mandatory)]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(
				   ParameterSetName = "All",
				   Mandatory)]
		[Parameter(
				   ParameterSetName = "Selected",
				   Mandatory)]
		[switch]$ShowCount,
		
		[Parameter(
				   ParameterSetName = "Selected",
				   Mandatory)]
		[switch]$SelectedItem,
		[Parameter(
				   ParameterSetName = "All",
				   Mandatory)]
		[switch]$All
	)
	
	IF ($All)
	{
		IF ($ShowCount)
		{
			$ListBox.Items.Count
		}
		ELSE { $ListBox.Items }
	}
	
	IF ($SelectedItem)
	{
		IF ($Count) { $ListBox.SelectedItems.Count }
		ELSE { $ListBox.SelectedItems }
	}
}

function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
		
	.NOTES
		SAPIEN Technologies, Inc.
		http://www.sapien.com/
#>
	
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		[System.Windows.Forms.ListViewGroup]$Group,
		[switch]$Clear)
	
	if ($Clear)
	{
		$ListView.Items.Clear();
	}
	
	if ($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{
			$listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if ($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if ($Group -ne $null)
			{
				$listitem.Group = $Group
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if ($SubItems -ne $null)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if ($Group -ne $null)
		{
			$listitem.Group = $Group
		}
	}
}

function Get-ListViewItem
{
	<#
		.SYNOPSIS
			Function to get item(s) from a ListView Control

		.DESCRIPTION
			Function to get item(s) from a ListView Control

		.NOTES
			Author: Francois-Xavier Cat
			Twitter:@LazyWinAdm
			WWW: 	lazywinadmin.com
		
			VERSION HISTORY
				1.0	2014/07/03	Initial Version
	#>
	#Requires -Version 3
	PARAM (
		[ValidateNotNull()]
		[Parameter(ParameterSetName = "All",
				   Mandatory)]
		[Parameter(ParameterSetName = "Selected",
				   Mandatory)]
		[System.Windows.Forms.ListView]$ListView,
		[Parameter(ParameterSetName = "All")]
		[Parameter(ParameterSetName = "Selected")]
		[switch]$ShowCount,
		
		[Parameter(ParameterSetName = "Selected",
				   Mandatory)]
		[switch]$SelectedItem,
		[Parameter(ParameterSetName = "All",
				   Mandatory)]
		[switch]$All
	)
	
	IF ($All)
	{
		IF ($ShowCount)
		{
			$ListView.Items.Count
		}
		ELSE { $ListView.Items }
	}
	
	IF ($SelectedItem)
	{
		IF ($ShowCount) { $ListView.SelectedItems.Count }
		ELSE { $ListView.SelectedItems }
	}
}
#endregion

$toolstripstatuslabelLazyWinAdminLink_Click={
	Start-Process -FilePath "http://www.lazywinadmin.com"
}

$buttonCheck_Click = {
	TRY
	{
		# Search for this account in the current domain
		$Searcher = [ADSISearcher]"(sAMAccountName=$($textboxComputerName.text))"
		$forestName = ([System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()).Name
		$Results = $Searcher.FindAll()
		
		# Get the current date and time
		$DateFormat = Get-Date -Format "yyyy/MM/dd-HH:mm:ss"
		
		
		Foreach ($object in $Results)
		{
			if ($Results -ne $null)
			{
				TRY
				{
					$Output = "" | Select-Object SamAccountName, isLockedOut, Description, DN, UPN
					$Output.SamAccountName = $Object.properties.samaccountname -as [string]
					$Output.isLockedOut = if ($Object.properties.lockouttime -gt 0) { $true }
					else { $false }
					$Output.Description = $object.properties.description
					$Output.DN = $object.properties.distinguishedname
					Add-ListViewItem -ListView $listview1 -Items $Output.SamAccountName -SubItems $Output.isLockedOut, $Output.Description, $Output.DN
				}
				CATCH
				{
					Append-Richtextbox -RichTextBox $richtextbox1 -Message "Account $($object.samaccountname) - $($Error.Exception.Message)"
				}
			}
			else
			{
				#Account not found
				Append-Richtextbox -RichTextBox $richtextbox1 -Message "No Account can't be found"
			}
			
		}
		
		<#
		if ($Results -ne $null)
		{
			# Here we check the property "LockOutTime", if it is greater that 0
			# this mean the account is lockedout
			if ($Results.properties.lockouttime -gt 0)
			{
				# Show the information in the ListBox
				#Account locked out
				Add-ListViewItem -Items $Results -ListView $listview1
				Load-ListBox -Append -Items $Results
				
				Append-Richtextbox -RichTextBox $richtextbox1 -Message "Account can't be found"
				
			}
			else
			{
				# Show the information in the ListBox
				#Account not lockedout
				Add-ListViewItem -Clear -Items $Results -ListView $listview1
			}
		}
		else
		{
			# Show the information in the ListBox
			#Account not found
			Append-Richtextbox -RichTextBox $richtextbox1 -Message "Account can't be found"
		}
		#>
	}
	CATCH
	{
		Append-Richtextbox -RichTextBox $richtextbox1 -Message "$($Error.Exception.Message)"
	}
}

$textboxComputerName_TextChanged = {
	
	if ($textboxComputerName.Text -ne $textboxComputerName.Tag)
	{
		$buttonCheck.Enabled = $textboxComputerName.text
		$buttonUnlock.Enabled = $textboxComputerName.text
	}
}

$textboxComputerName_Enter={
	if ($textboxComputerName.Text -eq $textboxComputerName.Tag)
	{
		#Clear the text
		$textboxComputerName.Text = ""
		$textboxComputerName.ForeColor = 'WindowText'
	}
}

$textboxComputerName_Leave={
	if ($textboxComputerName.Text -eq "")
	{
		#Display the watermark
		$textboxComputerName.Text = $textboxComputerName.Tag
		$textboxComputerName.ForeColor = 'LightGray'
	}
}

$textboxComputerName_VisibleChanged={
	if ($textboxComputerName.Visible -and $textboxComputerName.Tag -eq $null)
	{
		#Initialize the watermark and save it in the Tag property
		$textboxComputerName.Tag = $textboxComputerName.Text;
		$textboxComputerName.ForeColor = 'LightGray'
		#If we have focus then clear out the text
		if ($textboxComputerName.Focused)
		{
			$textboxComputerName.Text = ""
			$textboxComputerName.ForeColor = 'WindowText'
		}
	}
}

$buttonUnlock_Click={
	
	# Get the selectedItem
	$SelectedItem = (Get-ListViewItem -SelectedItem -Listview $listview1).ite
	
	if ($SelectedItem.count -gt 0)
	{
		foreach ($obj in $SelectedItem)
		{	
			Append-Richtextbox -RichTextBox $richtextbox1 -Message $SelectedItem
		}
	}
	else
	{
		Append-Richtextbox -RichTextBox $richtextbox1 -Message "Nothing is selected" -MessageColor 'red'
	}
	
	<#
	# Search for this account in the current domain
	$Searcher = [ADSISearcher]"(sAMAccountName=$Name)"
	$Results = $Searcher.FindOne()
	
	
	if ($Results -ne $null)
	{
		# If an Account is found do the following
		
		# Get the current date and time
		$DateFormat = Get-Date -Format "yyyy/MM/dd-HH:mm:ss"
		
		# Here we get Unlock the account
		$unlock = [ADSI]"$($Results.properties.adspath)"
		$unlock.Put("lockouttime", 0)
		$unlock.SetInfo()
	}
	#>
	
}
]]></Code>
  <Bookmarks />
  <BreakPoints>
    <Line Disabled="False">580</Line>
  </BreakPoints>
  <TracePoints />
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>
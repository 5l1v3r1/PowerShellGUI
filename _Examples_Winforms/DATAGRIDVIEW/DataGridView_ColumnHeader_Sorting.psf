<File version="2">
  <FileID>f426f1e9-20a8-4395-ab6f-034a4440c281</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAFDvSURBVHhe7d0HnF11nf9/V13977q7v9+uP3VF
RRBEkLXgIlIUUVREOihFAYGElkKHkIQESANSSUglvWdSZzLpk+m9916SqZlMkkkhCZ33//v53pk0
bmAIEBLP6/14PB935s6595xzz537fZ9z2+cIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQggh5JNMrbPDfP7zn9/xxS9+cccXvvD5HaeccsqOyy+/fMdtt96649YDbgMAAJ+R2267bcft
t/9txzXXXL3jzDPO8OP2F77wBa9zLHe2OYOcD43MP/3TP+mb3/ymfvCDH+jMM8/QRRddqPvvv0/D
R4zU1GmztGDRUi1eEqklS6MUsWQFAAA4LiL9+LvY/bxw4WLNnj1bg55/Xn/605U644zv6fvf/75O
PfVU/fM//7MfzztMcj44buDf/aUvfUlf/epXdf75/6vrrr1Wt99+ux555DGNGTdBK1atV2ZeuSrr
WlXXuEObmtpV27gdAAAcFzv8+FvXuE2VtU3KLSzViqhVGjJ0mO6++25df/31uvjii/1O/Je//GV9
/vOftwIwOjTKf0C+8IUvtH/72992g//5+uMf/6gHH+yh8RMma/nK9Vodl664rBLllDWquG6byurb
vdLNOwAAwHERGnvL6ne4sXircsrrlZxTqrjkTM2dv1BPPPGkrr76al144YU6/fTTrQS864b3kaFR
/oPTfuaZZ+q6665Tjx49NWbMeMUkpCuvoklpJQ2Kz69VfF6N4nNrFJdbDQAAPiM2Fsc6KcX1Kt20
TdmFFZo1e74ee+xx/fnPf9b//M+5+uIXv9j1AvC9752uv/3tdrfnP0Ux8RnKLN6kzLJmN4MGJeTX
Kc4VgFg349gcU9VxCgAAjisbi10BSCzcrMzyFuVXNSu7oFwLFi52O/E99MMfnqMvfOELXSsAp5xy
SvsvfnGBevV+WEuj1vk9/8zyZjfod+z5AwCAE4rtmG90hSC9tFHl9duVnJ6nYS+8pCuu+INOO+20
d7/2ta99eAG4/PLL2++55x69NGKMVsak+CtLLWn0M0gAAAAnHF8CcquV5I8ENCklt1yLl0Zp4MCB
9nqAdy+44IIPLwC33npru7WGJSvWKDajRIkFm5RY6LgrBwAAJ67Q6/RqlVlSr7yiKi1evFTdu9/7
7m9+/euuFYBXp830b/XLrWhyBaBOCe4KEwEAwAnNPyWQW+PfqdfU9ppiNibo3nvve/fCrh0BuK19
UcRS1TZsU3lDuxJcAbA2YUUAAACcuDoLgL1NsG33W0pITPUF4ILzz//wAnDbbbe1L1sepaatu1XV
vJsCAADASaLzKYCSzTu0Zcd+xcYlqXv37l0vAMtdAWhu26Oalj3+ChPclSW5UwAAcOKyp+xtzLYP
DGrZvk8bYxM/WgFYuixSja27VN28O3SFFAAAAE54n1wBaNmjZHsHQH6dPwUAACcu/1SAG7NL69sp
AACCJaVos1KL65Ve2qCMssZ/GOmOfRy7rZutY7h1tr/bdOEuf7Ky7RhunZOLOta75B9wW5eGtnVK
8eb3r/eH6HwtwMcqAE2uANRsec3PPKkgdEMDwMkiufCjPXCeDMKt55HCXe7kFn49DxX+cie3cOvZ
FUnusqasoV1bKAAAgiLN7yluUkxGhZbH5Gr+ylTNWZ6s2cuT/OnJZrbnln1FihatzlB0YqEScqs7
1vPw9bbz7e82nU1vl7PLh7veE13n9rLtZ9vRtqdt10PX2362gXJ9WpmWrs/WvKjUg7fXIdd1sght
ryTNjUzR4jWZWpNcrMS82vdt6w9zAhUAt+C28J8mm0fYeQMICjtEbJIL6hSTXq6l67I0beFGvTwt
WqMmR2rk5BX+9GQzclJo2UdPidL4mWvcQJGo6LgCxefU+PX2h4ndqf1u59vfbTqb3i5nlw93vSe6
zu1l28+2o21P2662fe2Qv23rpPw6P/hHrE7Xq/M36OWpKw/cXkde38lg5CTbXqFtPWnOWs13RWB1
YpErdrUH7uOd9/cP8okVgNrOAuCu7MiZfCj/D9ngv0cgtaSp4/TTcPD5IQDBZM+Zmg1ukFi4Mk0z
I2I1Z2m8FkYmKSI6VYtXpTl2erKx5U7TopUpmr8iUbMWx2rWkgS3V5znX5uVXdniT+13O9/+btPZ
9J2XDX+9J7o0v91s+9l2tO1p29W2r33OvW3rNcklfpCc4f42d1mCFkUl+8udvOscsmhlsua7Imfr
PHtpoqJcsbOdcHttQFfGusMKwI6PWQB8q3ZXaqddFxqUU+1FGgWuvRRUf7BCN02hzafxMClhNXVw
N0Sha4Om2JavY54AAiejrMmzB8vxs9Zq8px1WhOfr4yiWuWWNyivolE57vRkk1veGFr2Mvf4mFup
CDewj5u2SjMWx/tPe8uv3epP7Xc73/5u09n0djm7fLjrPdGFlr3Bbz/bjrY9bbva9s2p2uJLwJJ1
2XplxmpNWxCjDSlFyirepFx3uZN5W5vsss1KyCzXPFdqxrptOndFii95WRXNB14E+kFsvDblDTs/
ZgFo3dvxSsTQq0u7rLRJafbqxdwyJaXnKCk1Q4mpmWElpTnpuUrMKHYrXdGh/IDEI2VVKMm46ZPS
85ScXeyLhp9nuGUB8A8v0z042teWL4vJ1agpUXp13nolZleqoLpF2RVNyiprOEk1+tPcqmblVTYq
akO2xrj1mzxvg+JyqlW4ebs/td/tfPu7TWfTH3r5k5FtN9t+th1te9p2tdcD5NVsdYNhixauSveH
zGdGxCm1oCa0rd0AGu66Tg627I3Kr25WTmm9PxpgT2lMj4gPHe1xxafz3QEfpPPp8YrGXf6TAI9/
AShzTcUVgOTMfCUkJHqJKWlOesdp58/pSkhKU0L8RiXHRChl3WQlrxmrpNUHJa4apwQnPjokzk5X
TVDCutlK2LjGl4DUQlcAbJ4lH37j4HjouL+UbVFG5Q7l1u50D1Th5de2Kcf9o2e4O/z7rwfomkML
wOhXV2r6wo1uUHB7/5XNfg95Y1alYrOrTjobs0yl38nJd4P6moQCjZ0arclzjygA7nc73/5u09n0
djm7fLjrPRq7rWywsa+UTS6yvcljY4es7cNobNnCzefD2LLbstj2s+1o29O265EFwJ47n7csUZkl
m31hsPl91G1tlwl93P2m96+Lux0S8zf5ZYnNrvbT+g/GC3P72Hl224WmDT+vDxLa1lVukLcjIE1a
sT7Lvx7gpC0ASRm5SkhMcnv52UrJq1BKfmXo1P9cpeS8SiVklCoxNlqZUY8qf9Glyl9wvvIWXOzl
LrhEWfMuVsbci5U2+yIlz7xIidPOV/xUZ/4dil87282j1N3ZO+ZJAThBdNxfSluUUbFN2dXblVe7
LaTmcLlVrcpyrT2j8zLAMegsADZA2EAxc1Gs0grr3N5wqADE2GBoD7InmRg3INiy24Be4Ab2tYkF
/lD/gSMAm7b5U/vdzre/23Q2vV3OLh/uet+noyjE5dh3y9cqwQ04NvCZhC46fHobCGsVawPykfPq
Alt22262/Ww72vYMFYC8QwpAhi8A85cnKcvtQHQWALvskYNrp43Zdj84/L5gyxjnljXeLfOh6+HX
Jc+dl1vnbxdfABxbL1u/0LShD905OK2VHpvWytfhBezA/Oy8Q87v/FtoW1e5x01XACqbFLk+W2Os
zJ5sBSD9QAHIU2JyqlJyStx5TUovdytgp6ai1e8hJua65hS7XDmLr1Plgq+rPupsNcX8wWtcf7nq
116mulWXqib6ElWtvEhFC85U8iv/qg2TzlfsyglKdjdcWnFzaJ4UgBOAfWCJ3VGblJqdoXWr52j6
1PEa/MJIDRj8kvo+/5Ke9oa7n4dr8KQITd1QrtUFbUp1l8ksc/cf9w8Q/rqB8A4tAGPcnrAvAG7P
Ma+qxT9Yhx7ka046sdmOW3Yr1XaIe21iYUcBiPGD3cGnAGI6CkChn86mt8vZ5cNd75FsD9iuZ11a
qRavTdOUeas0Zspitwe6WC9PXdIlY15100+O0NhpyzRrSYyi4nIVk1nhB3J//UfM84PYstt2s+1n
29G2p23XIwuA7SF3FoAcdx/o3Pu2dfkwfrkcW8ZIt6wzl8b4Zbd1GD05tC4TZ0Vp4cokrXe3iw3C
VgAiY3I0fdE6v86jp7hpjZt+8txVWrw6VetSS9zyh46m2Lszws07HCsYJsMXgGZF2tM9VgAWf7QC
YK8D+EQKQF3rPj9De6W9nXZVRnmL0t0dMLmzAORaAXCDtC8AocE6o6MAJOXVK3HjEmUt+pNql5+t
nTn3683G2c4svVE3SW/UjNXrVcP1evVQ53m1ptyqtKmnKnrs/2r9inGuXFS5ebnrs3m6ASTc8uB4
coN49U73YLxFyRte1ZwhF+vvV56pM888Q989/f1+cd0D6jE1S7OzX1OKuz/YC3g6PwkL6KqsyhY/
KCzfmBcqABFxoSMA1W4no2CTH1RsEDrZ2J6pLbvtFRbUbNHapCKNm75KU+bH+AGmqH6HP7Xf7Xz7
u01n04cG0/DXeygbaO0Qtu2xLoxO0gsvz9RDTwzWPfc9pbud7g883SXdHuiju7o/qe49+umpgaM0
fsYyXwJs8LLD4+HmfTS27LbdbPv5IwBue9p2XeG2rz1tmF25RYt8AVip+SuS/XPoue4+kJBnA64N
vgcH+PCqQ5+Y55YtMi7HL+vTz47S/b2e0d33htb7rnufVI+Hn9XzL07W3OVx2pBepqjYXL3sBvzH
nn7Rr7NNY7dTt/v76KEnh2jYmBmaF5ngS4Wtc+hpEFumw+dtOs/v/FuoCNQo092f813xsaJhBWDG
4gT/lEpOdat/oWu4+/+hfAlwKpp2f7wCsOkYC0Dm+wpAqR+gMyu2+lP/c2WbKwStSu4oABkLr1JN
1AXaV/mitC9H2psh7VwvbY+S2hZJ22a5n6doT0FPpUw7W0tHXaA1y15Ram6la0zW/t08u3Dj4NPW
rOzave7BuFUJy5/T5If+XVdd8h/6xo9+rXMvvUG//9P1uvLq6/WHP13nfr5Otz40RM9GFGhx3i6l
ugJgr+KlAOCjOlAAYjsKwOI4pdvz5jWtBwaf0GHbk0t8Xujr2O3jfQvduqzrLAALOgpAQ7s/td/t
fPu7TWfThwbT8Nd7KHvLWHp5s9/7HzVpgR59yv1PDhqpca9M+0heeWW6xo6dqtFjpuipvsPUZ8Ao
zVwSoyRXLuxF2uHmfTS27LbdbPvZdrTt6QuA276dBSBitRWAaF8Asg8UABtwjxz83e3QIcH93sne
OWbrPi1inZ7oN1z9B76kqVPnafLk2X59xo6bqiFDX9YDvfrr6efHadrCtRoxcYEefPg5Pfn0EI0b
F5pmwsSZmjZ9voaPnORvu2Evz9Lq5GK/zlYwDl+Wo/NFwPEvBHQFIMoVgJft6azFiR+pAKR3FoDm
j1MAtu7Wpq37/AzT3JV2vs2mKzIr3J6+W4DkzIMFIN39c2ZUuhWwUyezeqt/GiA5v14JMUuUOv9q
VSz7mfYU95fa17rBPlLvtczUe40T9F79cKn+OanhabWnXa+4Cd/Rwpd+rtVLx7sCUOXmaeViiysW
ze9bFhxvVgBecw/GWxS3ZICmPvFN3X7PZfr9gAj1nV+olQm5iknOVXR8tlY6q1NLtNHdB5Lt9QLu
8pmd1+MKXZa7v+RUbVWuu68cpmqLP9yXVX7ofI0rgm6+WZV2iNCduvtZVlWrst1l7J8npzJ0GSuL
VkZtmmybxs0ny80n55B52FuNstz9yS9Px7LY9RxcDndZd332dqTDlwGfBTs8aoPCith8vTxtlWa5
ASPDDRw2GNpbhv1eqHsQPdnYXrAtu90Pi9y6rHcD/CvTV7sBf6Mf7IpdAbBT+93Ot7/bdDa9Xc4u
H+56D2W3T7a7/692l336uZfV65EBio5er/b2nd6OHe3auXOXdu3a5U8PtatD57Rm8+ZGP4De16Of
G8CWKMUNtPY/F27eR2PLbstl28+2o21P2662fQvqtrn/z1ZFrMl0e8jRWhCZrBxXAOzpgs4B17+O
4QBXKg4InZfofradleTCeleclun+nv01ctQkVVbWaNu2Hdq9e49fv+zsAj03aLS6P9hPfQaOUc/H
BqvnwwO0KCLST7dr127tbN+lLVu2KjJqrXo/MlB9nn3ZPbbl+8ciW5fDl+XoOkuKPUYVuHVZ6QqA
vbBz5pJE/2LE3Jqt7nb88DHOSoCN2ZWuALS6AhBzzAWgzRUAtzBpdsU24y7KtIG+1ApAvhJcAUjM
KVRy+WalVNQrxU6d1ErXUsrrlWQbZcMSJc25RiWLfqydeb2l1tlS8yS9WzdU71T30zuV7rzye6TK
27Qt7iKtG/1fmjP0fEUvmaC0PFcAyreE5mnlIszy4HhqUXadHQEIFYBpT5+mbo/cpFum5GtC5nuq
3PqmGtvfVFXr66p0ypt2uwcsG9AbDxv8M6t2KG/zayprCU13mKZdKq9r9c+T+Tv8gcu5QaBmp/Lq
97kHiV0qrN2ugsY9Km7dr4rWPSpr2OqbdXblDuXU7VOhm6aodpsKNu9WQdPrKttycB7lje7y/m1F
rjRUbVdew2sqdedX+L/vd3appKHNL0Oma/qh+R95W+B4yXYFL9sNCpGxBR0FID5UAGq3KtUNJPap
ccnuwfhk4wdEt+xZ7v5V7AaA9W7P0t77PmVBrN9TLm7c6U/t984CUOwGTZs+Kd8uv9ldzwezF1Hn
VLVpVUKhHu07XL0e6q/UlEwda9555x1NmzZfd3d/QiMmLHB72o1uUNsSdt5HY8tu263IBj0rABGd
BaBABZu2+7IesSbLHxVYGJUS+ryEjqd7/J6+jSvudvEODP4HJeVt8k8dp7h1t+fzH3v6BT3RZ4iW
LV/tBvO2jjWR9u/fr2R3WwwZNk5/d+vT+9Fn3eAfpbpN9R1ThJKRkauXRkxQz0ee1dAxM7UmpcTd
L13pKTzkhYJuvl7n7/muiHSyEpBr5cUVALdzU+jWZeXG3FABWOoKgLstcmvbXKn48DHOHg9tzK46
tAB0O6YCsN83DrtCO+0q21uyB3N77j8hPk4JK5crcckCxS+co7gFsxXrTmMXzlPcsqWKX5+s+HWL
FTfnRuXPPUc7Mu50e/ojpE3P6d2Kh/ROaTe9U3SzVHiVVPwbbV13lla99BVNf/58rVwcKgD2fLOf
px1ZCLM8OJ5a3OC61w2yrYpfOlDT+56me3pfqxtfTtbI2J3uH3ebSjfZq/9tL9txe23ZHXvzfs+8
MtTu88urlJKVqaj18e4fPFYLOkUnamFciVbkun9etxdv/yh5lbZHb9velUq7z6VnKy6vVLH5VYpN
yNKqlQlaHJWpZXHV2lhon6ZVoeScHD/NxgLXut0/b8zGWC1btVELVsZrwaokrUgqU1xpm1sXN8iX
VSoxMd01/NjQskSnatGaUq1Oa1Cau+/luAJj/7Thbw8cD/4Ij/PJFQAbGO3Fz3ZY1ZU7J/Qao66x
6f1lSuwzURr83mz4+XywwwqAW5fOAvCqG/BtEClxBcBO7ff3FwA3kB4xsIbTWQDsY2efeGaU24sd
oPj4lI6hTXrjjTf83m5TU4saG5vfp6Wl1e8Jv/fee376vXv3asqrc/3z4vZCuk+yANj2LXQFwPaG
DysAbgci9HRP6NX4foB1t13nEZSD7He7Te17BdxjgVv3aLe3Pm7aEt3/0EDd37OvZs9dora2bXr3
3Xf9+lgS3P//s4NGaer0Bdq+vb3jXLeur+1ValqW+g8c7gvCwGET3WNIYsfrNtw28AXg4DxDpayT
HZXqYMvWUU7sqGShe0w5tADY/SfPFQA7qhnu/n+ozp2iquY9x14Aml0B2Nz2up+htQp/OLWL7HCS
PSeXWlKrpDXRSn7+UaXc+hvFX3uhNtxwidbc8EutuuYSrb7jesWMG6/Y1Qu1YcFtypxxptqSrpVq
nnB7+w/4gf/t/Kv0ds5lei/n51LuuWqN/roih3xRUwb+XFERE5WeV+3mae3f5tlx2BefoS3K3bTP
D+4Jy57VDFcAuvW+RjeOSdSImO2+GJTUugdrN60//N7J3ceyK23AdXvm1fUqTo/QgnE99Lc/X6GL
Lvm1LnR+YaeXXaWL7xutm2YWa17uNlXXb1N53VbluoE6q7xM6xaP1cwXu+vlOWM1aukKjXz0cT38
qz/pil8+ppsfidErsdVanzpfy2Y9qNGzx+i5iNUaN3qAXrr31/rLH9w8fnW5LrrsSt38xHiNjGlW
csM25aUs1cyn79ddbv6XXnKZLvr1rfrl78ao56A0Lclzy926ww0+rgh8xP8TfHLsleE2KNgnxdmn
p9khYxs4io6xAKQU2pfN2FEpu5+6xxd3v/Xs567omN4em+ypKSsBfnBzA0C4+R1NaNBwBcAV5CJ3
P1+fXOQLwFQ34NsgUta0y5/a73a+/b3ErbMduUoucKWjsN5/yuoHsfXMdcV8TWKxnhow2heAuLjk
jiFOqqio0YyZi/T84DH+OfFhL4w9wM578aXxil4Vo507d/vp9+3b5wtA9wef1pgpEa5ENbnlaQ07
76Ox28pus+Iat9dbtNlvT9uuUXGFKtq8ww+Gi9eGCsCCqGRfAArc44p9FK4fbO22c9vQs587HFoy
UgpdMXPzsvOj4/M0fPw8PfDws+rR+xk30M9XdU2dXx/Ltm3blZmZ526L6o5zpNf3v641a2P9awe6
PfC0nn5+rOYsj/OvQbA9dju6YIfurYQdVsTceSFueTrZ8rnltmXPcWNnUa0VgNBTALOWJvnXK9hT
H/Y0V7j7/6F8CXCqW15Ta/vrvgB0O5YCUO8KQLZ7QLcrtAfrrrIH/yzXxlMrG5W4LELJf/2tMn7w
z8o+72vK+f2PlHrpWVp7xr9p+dn/T6see0QxK+dp9cK/K+XV72pb/K+kqr9J5ddJBZdJeW7gzznX
+Z77+VvaHv0VrRj0OU185udasShUAOwfzuZpN0645cHx5PbIXQGwPfzEZQM10xWA7o/eqFsm5Wh8
2lsqb9nniuU+Vbh2Wt7crpLNbcr3z+m3+csU1NQqJSFKc154VPdf+0v9+Cfn6vQf/Vg/+J8f6Rzn
rB+eo1MvuU5nPDBK981N0ZJ813qrt6vUXVdeRZ5WjLtHQ//yNd13/5W6s/9QdbvmNt3w/Yt03jn3
66r7YjRmY7XWrH9Wr/Y9Rbffeal+3f1Z/f2eO/XQTT/R5Rf+VOd8/3Sd8d//qrMv+aOu6Dtbz89b
p7EThqv/X6/XdW7+5/34XJ1x6g/0jX/9nX52xYt6eGmeFte6YuP2PoptPdw/b/jbBZ+mfDf4Wwl4
fwFoC73Yyz/whgbED9I5ANmD8caMCkXGZGvu8nh3fTGatWSjZi/tGpvWLrMgyr68J9+/fezQQSfc
vMNJcoO4LXtWeYuKjygANmiUuwJgp4cVgE3usdD9H37kApBsBWCMej38jDZsiHd79O/6veCYjUm6
74GndM2N3XV/7wF6+KlhevjJkNvveVzX3thNg10x2NRxWHz37t2aOGlWRwFYEioAlVvDzvto7LZK
K25y63x4AVjpCkCxKwD2QsAjC0ChKwBW9kJfpWvXY7e32+4dH41rDp538DbufAv52pQiTZi5XD0f
HaQeDz2jmbMXq6qqzh/dsKc13nO3hd0mdkSksbFFsXEpGvDsSHV7sK+ee2mKFq9JdQN4nRsv3c6v
Fb6O6+/8jP73LUPH3z0rqR0/22sZjiwAVoYK7bUPXRjj/GuXPlYBWNpRALa97g/H2t68vSiqq3Jd
a8tx/4xprgDERyzQxhsuVvp5X1Vtt+u1bfQQ1fd/RMm//qkizv6Glvd4UOsj5ypq3t8VO/6b2rLW
DfbFv3WD/y+krB9KGadLad+U0r8qZf+n2iK/pGXPfU7j+5/vC0BGfrWbp7V/N087DBhmeXA8tSq/
fr/yqtuUtNwVgH6uADxyg26ekKVxKa+rpHGParfsUWnDTpU0bFeRe7DKsxfV1e5xRWCzCjIWaO5L
PXXjhbfoRz/pqeseHaMBcxdp9Mz5mjBrnkaNGaSnul+uK6++SD96cJBunF2kBTltqm3b7fYWChQ5
4R4NuupfdcuvztZVf+unO56cqj4jFuqFye4BeVW91hU2KmHNM5rU+9/123P/r755zp36ffcxGjQj
QmPnrtCEUc9p8P2/1NW/PFX/fe4FOuuS7vr5PaPUa9hsjZ+5QJPnz9TQJ+/UXRedqfN+eYV+9EyE
HlvvHtRdCa1yZcY+2Cj87YJPU4EbKMzKhEKNnb7aDcDxyiquV4l70LTD8Dao2OHeD2PT2ovDNmZW
ap7bmxsycpp6PTbYvwjs/l4D3AA4sEvu6/mMuvfor0efekEjX5nnBoc0/yEx9oJlGxDDzTsc24u0
0mAP/CWbt2lDSrFemblGUxfG+UGlomW3P7Xf7fwNKSUqddPlVNrecKNS7DD3h7D1zavdoXUppeoz
8GX1fKi/oqPX6c0333Re1/IVq3VXt0fVrecATZm32g28GVq0KtV/C9+QMbN1yx0Pq2+/YSouLvUF
YMuWLf7V8VYAxk5d6gZYGz+siIWffzi23rZcJZu2K6uk3n/RkW3XlQmu4DS0q2DTNv9dAPa0gD0F
YK/FsaM9nU+3hL4bJqTzg3GMFQTjf7dTPx978bEbNN1yrnW33zi3zA89NdS/+n/suGnKzy/WW2+9
4crQ264AvKPW1lYtWRqtJ58e6l88+Lwb/BetSnbXtTn0HH2Z275+OUIOXZZD2YsjO/nfO6bPr97i
y97K2NxQmV2W7JaxUUWbt7ui9uGPL/YFUTZm17Tu1VYrABuPtQBs/3gFIL2yQbGuAKy+8ddKvuxs
NQ3rr7c3rNeuGdOUdtNVmvfT7yui10Nat2KOls+8VcuHfEkZE/9FVYtPUeWir6pszldUOuufVTrz
n1Q263Mqn/s5pb78OU175HN65elzFblovDIKatzA7x54KQAniI4CULtNKauGuQJwqv5280/189v6
6C+Pj9UzQ0dr0IujNWDoRPfzCjfo5im6sFnZ7XuUW5arhIl9NeyaK3XJub108Z2rNSLWXefed1W9
+23V73lXVfUlSl/QWy/c9b8691d365x7V+mlNZtUsus1t2dQolWvPqgh139NN1x4nv7YbbweW1St
ZXVvqHDbG6rd8Y7KXOHIWPWsJj38dV1wzv/TV378kK4emq7FNVLJbqmxuVyFG1/S4NvO0A++/Dn9
n/+4VKd1W67+G7Ypd/d7anj9DZWlzVXkoMt07Q2X6t//NlZ/mlSo9SVbVNW83e2FtobepYDj6v0F
IMEPHDaA2EASeiAOP9gcyr+eyJW55W7P3wb/J/oM03PPj9KgQaM0ZNhYDX1hXJfYHvGgwe5+PnC4
nuz7okZNXKB1qaVuWdt8CQg373BsALeB3AZ0G9htgPcFYNERBcD9/rELgFu+Ps+OVY/e/bR8ebT2
7durvXv3aPGSKF8A7unxjCvBUZoflaQ5KxI0b0Winh8xXbfc/pD69B2inJx8P0Bu2rRZo8dM6igA
y0IFoHpb2HkfjW0vXwDcoBeuANgnIB4sAKkdBaDtoxUA+9393Z6isSMsmW5+qxML9fKUxer9xBA3
uPfVmLFTlJ2dpz27d7nb4jXtd7dJfX29Fi+N0pN9hujeHv008IVJ7jZJdHvwbu/fFQDb+7b34if7
eR9cjiOFLQDuNN+NY6ECkBcqAMs/agGw18Rt+fgFoGH7G26GW/1bbGzGXWUP/vaKxYyqBm1cvFAr
bvqtYn55lmr79NLeWdPV+vxAxV52kab+z5ma3/tRrY+ar8g5d2nuM/+mef2+qIXP/YfmD/w3zen/
L5rV9//TrKe/7M3s+yVNefRzGvPA5zRl4PlatXSSLwC5rgD4ebrSEW55cDxtVUHD68qv26H09aPc
9vu2brzk3/Rf3/yuvn7q93Xa987U6Wec6U4vdB7WNd1XaVLaZmW/3aL07GhNv+NB9T7rr7rzzul6
dnWTVtXsVdnWvarY4rS+qcrmZlWWLNGyl5/QX3/WU7+9YKKenVWg+Nf2K7exVGsn3auhf/6mrr/+
Bt34QpxGJ7Yru2mvqra+poq2t/0/VkZkf0164hT94roL9fV7Z6tnxCZl1L+puu3vqG7nFpVWrdbM
R67U7V/9d/3mx7fp1nFFmlroLrvtLVci3tDmskTlLu2jB3t109f+PEaXv5iiFUXNKt3S7r+dzf6B
w982+LTYgGCi3QDxcQqAvYXUBulZS2Pdnv8gPT9otLIy81RXV+8PcW/a1NBF9f4yGzYk+IHi8f4j
tWJjjh9o7d0q4eYdzgcVABvIKrfs8aefVAF4+rmx7n7dV0vcoL97107tclZErtH9Pfrohpvv90dC
ej36vHo+8px6utPb735MN7rzn3cFKTevwO0pv67q6hqNHDXBf1DOuGnLfOH5pAqAbd/Sxp1+MFy6
PucTKQD2AkW7nL0OYMzkCP8+/54PPaOp0+a5vf9CNTQ0qNk97jQ1NR04ramp0Zo1MXrGFbx73Ho+
M2SC5kXZNzRW+xJgA/ahg3s4nX/vnOZoBWC2KwB2VKG4fkfotS5H3PePZDth9o4Y+yTfj1UAGre/
6a7w2AtApisAMYsXKeLPv1f0z7+n8m63aNez/dR411+15twzNf6s0zSz18OKWb1cG1ePVuTkvyhi
9NWaP+oGzR15g+aMuEGzh9/ozRp+k6a9+Ge9OuwGTX/xOkVM7qUNqxYqPa/cH3alAJwoDikAa4dr
Vr/v6OY/fEunn/87nffbm3TF1Tfqqmtv0B+vvsv9PEI9nk/R/Jx6Fe/MVfyqV/TIxd10+TefVM/B
sVrask/ZbuAucXvVBfY0QY1r/g2tqtpeqPjImRr48966/bRn1HdMipa5gTmjoUzrJnbTC7d8W7fd
e7+6zavWnLzX3V5/m8o3uz3Exjf8K4VTl/fVlKe/oyt73Kifj0rWsPjtKt20Q9Vuz6JkR4tb/lRF
9Oulp0/9hbpf+YwGrWpSZN3bKti8S8VObXm2Sje+oqf69dV3/jxWlw+J1xJXAIpbd7r1dusf9nbB
p+lgASg+UACyP0YBmLpgnX9gHzrsZTU1NvlD29J7/jngruhMfn6RnnhqkHo8MsjtsWacsAUgv6MA
9HUF4IFeTysiYoW2bm1VW9tWpaRmaMrUORo8dIwGDxmtIUMPGjR4lF4c/ooiFkeptKxcu3fvVHl5
hUaMHO8LwCuuANih9U+0ADTtdP+HrgBsyD28ANS5AlBilw99dP3B6zs46B7KXqUfenpos6Jic/Ti
2Nm6r9czrgD108RJM5Wbm6fXXtulPXt2KSc3X0uWrtT6DXGuADTqzTf3+yMBKyJXqe8zL/hPA3xy
wGi3nBsUn2Mf3exuV3sqwJ1auTiUfUiPZz93ctN1loGPXwBszN6qumMtAEs6C8CON90MQ4fWbcZd
lV+3XXl125RV3aANSyI078Y/aOHZ31TqFb9U9V//ovzLLtbC//4vDf/OKZr64AOKWbdOiZlp7sZd
7VpVlFYfZqVWrV7pT9e639evjdLG9SsVu2GVEuI2KjWrQPZtcn6ernSEWx4cT20qdANtgdseqVGD
NLv/d90D6R901eAVenZxqXuQKXLbukjrU4q0LqVKsQV2P2lxg+pabZjeX9f+rJu+ddow3fFSiqJb
dytv6y7/VqACd715NTtcAdiq8l3lSlgzRy/98h7dd3pvPfVCvOY3vaXUTeVaN6mbht/2Hd3bu6ce
W9aghUVvqdgNDKWuBBQ2ven30JOX9dX0vqfqjkdu0Q0TszUu2c2jrl0VrgCUbnf/gJsTNb9PPz3x
nZv14LUva8TGRq1q2K/8elcAnJqyTBWvG63H+zylb/9lnH4/LFFLi1tU4gqAPxT9vtsEnzbbIzTR
ia4AzFit2VYASl0BcOcdSwGYvmi9/0jbgQNfdIN4gR/YbEDc0tLSJdu3tWnnzh2KjU3Uw48OUK/H
h2jZ+qxjLwBuJ8cXgNRQAZgWEe/+3qCq1tf8qf3uC4D7u01nO0Wp7nJ2HfYivw9in6Ra4JZrfWqZ
nn52rN/bj4hY5vZ2G9Xa2uL3dkvLylRYVKyCgsLDFBYWqbi4RBUVFdq8eZO2ufUuLS3V8BGv+LcB
jpsaKgD2IsNw8z4ae/2DLddhBcBt11Vu+5Y12//hjvcXAPd/bs/n2+DvPwzHDe7vZ+eH/mZP9dgL
9lYl5GvMlEV64KGBrvz01auu7JSUlGjLlha1Orb+8xYs1aNPPKdhL76ijIxs97dmr6Fhs9aui1E/
VwLuvu9JDRjyihZEJfgXZtpnFVgJSLcycAj7kB7PL0cHt9xWAoy9oNUXgI0dBWBFin9awZ76sBc/
hrv/H8p2wmzedVv3aetOKwAJH7UArFBzmysA7faA6dqk22uyGXdVgdubynfNO7u2yRWAxZpxze/0
yn99WTO+9V9adPb3NPOUr2noP31O/f7z/2hK93u0fv1Grcxt0Iy4Bk3ZuFlTN9ZpWmydpsfWatrG
Wk3ZUKeZMTVamVCi9OxS5ZZsVoZ9m6BrpikZOf5DZOzDIfJd6Qi3PDietqnIDbSFrgCkRD6rOc+c
pvue/Iv+OqNEr+ZLm3ZJbXul+p1va9PO/ap2JbO8vlUN+cu1bvzj+s1Pu+nfzhilW0eka01ruwra
dqnQDf4FNW7bWgFo3Kqy3ZVKWD9Xoy67Uz2+d7+eHBKrOfVvK2VThda7AjDCFYAHH+6tPiuaFFHy
jl8We7dBUfNb7j7S5gvAjH6nqvtjt+qvk3M0MWWPu/+4PRf3D1a2vd7dd+M196mBeuw7d6nH9RM1
KrZBa5r2Kb/BHnh2uwKQoaI1I/TYU0/oOzeP0x9eSNLyki0qdWXF74mGvV3wabIBwaxKKta4GWt8
AbAviCmp/4gFwO052WuKrADYq7v79x+qrKxstbdv8wNiff3mLrGBY/v2rVrvBofeD/XzLyT0BaDO
FYCKj18A7BvibLCo3uoKgDu134+9ALS44truynmZnnxmjO574EktWbxcW93gv33bVr8u7Tu2afeu
HdrlSs2undsPsvOc0HTN2tm+XZUV5b4A3NX9Cb08ZWmoANRsDzvvo7FlP7wAxPvtujqpROUtu/1g
2FkAFnS8CLDYrbd/y6Xt2dvA6y7/fna+KwLu51z3mGLPldsXFz1i72x4dKBmzlqgoqIiV/ja/d5/
sSs98+Yt9i/4u9sVGnth4KgxkxUXl+QLwBuvv6bGhnqtWxvjj4bY3194eZb/XoWCTe2+YHR+JsSB
z4awZfPLd4iO5TYFbiflyAJgb++zpz7srYDh7v+Hsp0we01cXdv+T6YA2KH1cDM6mgMFoKpeGyNX
aF63OzT2R2dq1Fnf1Ygfn6MXfvRDDTj9ND1/3k81t88TWrM+TtOS6jVgZbP6r9yiQdEtes4ZENWi
p5c2q/f8evWZX6HpKzOVmp6josp6ZZdtVkp61iEFwM2TAnAC6CgAbnukRj3vC8C9j16vv0xI19jk
vSpq2K3allCDty8yKWrc6/5xW7W5dJU2TO2ra867R6d8d5juGJ6uVe7BrWDbHhW76y1015tf2+6u
u02Vu8uVuHaOXrikm7qf9pD6vJighS1vK63+YAF4oHcvPbmsUYuK33F7BttVWu+WyxUA20NPWR4q
APc8eotumZitCcm73fLuVIX7Byvb3uDuS/Ga99QzrgDcrgevG68RGxu0unG/Ctyyl9jyH7UA2PVQ
AD4LnQVgdbgC4B5c/fOsHXtYH6SzANj7uXs+NkhP9nlekZHRrgS4x5qUNCUmJndJamq621PM0py5
i9Tr4f5uYB2pyNjcgwUgzLzDSTFuQPQFwN2HY9wAP76jANieY7Vr03Zqv9v59vcyN50vAMW2V3no
3m949hy9FYAN6RUaOGyyHujZV5Mmz3DrkKb09AwlJaUo2T7S3a3/0djfTVZmlt+he+754W4wfEaT
Zkf7F1b6AhBm3kdjy26DuW0/246zwxSAZYcUgHxXAKws2IBrg7v/wrkPYH/PczsG9lz5q/NXu8eL
AXpmwAtavXqd39aZbj2s+C1cuEyPPv6sPzrw3PBX9YTbjvc++LRGjZ6k+PhEZWfn+GntNpg0aYbu
7/m0BgybqA0ZFSqs3+UG7i1h5x+OLZMpdI9RJU5nAZhzDAXAfMwCsEdN7faAGTq0bjPuqsLN7X5P
K7O4SnEbNih68gQtfu4ZzevXR3MG9tfs557VzAHu9yGDtHbODK2JSdC4dRXqG9miwWv2aMyG/Xpx
zX4NiNyvRxfu0x2TW3TfxEKNj0jyg35xdb1yyuvd4J+tVFcAcisb/TztKEC45cHxtF3FbqAtctsj
beXzmmsF4JHr9OdXUjUmcbdvxVWNbk++Y9qC+j1uWndnrY1X/MIh6v7z23X+t/qo2+BELW1+Xblt
+1Tm7kvFbvr8OveP7wpA7Y4CJSyfrr7/21u3njZQ/cala+Xut5TVVKF1E7tr+K0dBWC5HQF41xWM
HSprcMvlSoIN0KnL+/l3J1gBuHlijisAtgy7Qh8xvMPuSwma18cKwN9cAXhFI2IbtabpdRU27nH/
hHtUV56p4rUj9bgrr74AvJis5aXuAdr9z/hD0YfdHjgebEAwNkDYQDFnaYL/fPiyhh2hQcENkoft
cR2FDQhWACJjczR45FQ99NizeqrPIPXrP8QZqr5dZNOax598Tg8/OVijJs733yaX54qs/66UMPMO
x+8VugHR3ipb7u7DG1NLNaGjANjfa7bZF7Y1+d/tfPu7TWfTp5XYXqXt9X4wu33sqQl7m+KEmSv8
x+LaoNe330db5752G7nL9Hl6sB5ye9PPDHlFi6KT3V62PTfdFnbeR2PrbMtl28+245ylBwtAhb2N
2A2G9tXANkAuXJniPzu/1BVAG3DtXQf+48Q/RH6tvaq+zb+Fr//zY906P6dnn3vJ61xvux0e7P2M
ho2ZqYg1qb4sPOpunx4P9ffr2a/fUA1wxeH5QSP0dN8h/suAxk5d4m9LO6pon1ETbt7h2DIbv8Pi
HqeiY/P9FzzNdQXAXtlvH/pkn4IY7v5/KNsJM5u2ve4KwBsfvwDYlYWb0dH4AlC7VRm5JUpMSlaS
a5KpOflKzS1QSma2ktLS3eCdqTTXnrIy07Q2NkmjluWo/9JGjd3wlmYlS6/ESIMipUfmSreM2qLb
X8zUmDkxrgBkqqR6s7tTbPJlIDXTCkCTm6drRxSAE8BHLABu4C1yLb+6uUJpMbM0/C836M9n/F5X
/2Wc+rr7w+q6N1W1623VtTs7pbqtW1RZME/LRvTSXRc+rGt/O0cvLqpQ6v43VNBcpjVHKQD2oPjx
CsAbFIATWLgCkFvW6J/W8YOCGyTD7XUdyaa1T/CzF3LNWxHnS0Bv/zkAff3nADzQe2CX2IvJ7DUE
j/R5QcPHz9WStW4v2Z4XrrIvdPmIe4VuQMx3e3QVbjB8fwHY708PLQA2nU3vB9Mjri8cG3xC79Nv
8MXn5VcX64n+I3Rvz/5euPULx24fu516PPycBg6doOmL1irGlR4rPHabhpv30dg62baw7Wfb0bbn
0QrAopWp/iPBy2xbu4HSD/7+7Xghh39Knn2wnb3V017Ybq9va1NsZoVmLl6n516Y5N/ZYNvNtp+t
+6Nu+41w2y9yY7YvY/Ypf9MWrFK/QeP04EMDdW+P/rrPTWdfI2xHeca+GuFfUGjT5tVsDxUAm6/N
3+br2c8Hl88vY8dyGb/D4h5HVn0mBeDWgwWgeac9YO5wV7rdz7iriurdYOwKQHpOoZJS0pRRVOEe
PNtV1LxLOZWblJZXoKwSd15dswrL3IN2bLKGzE3VwzNrNSzqDU10g/+wldKTC6Ruk6U/Ptug6/sl
6aWpa5XqCkBpTb1y7UuFfAHIVV5Vs5unu3HcDRdueXA87VCJG2iL3X0gLdoKwHfV/ZFrdZMVgKQ9
vqhVN7n7wiHT2/2lvHWv8gtStXLUTXrssv/WT757gy64eaVeimlV9r73VL37HTXseUeVm9ze/8x7
Nfyu83TtXx7XzYNzNTNluyr27HcPCqVaNbGbKwDf1gO9XAFY0azFpe+ppL5dFa50lGx5xw/QBwvA
zfqLFYCUPW55d/svz6hob3LLk9hRADqeAoht0trmN1TU9Jr7J3xNmypcCV0XKgD+RYD2NsCyrSrb
9lroUPRhtweOBxsQzJrkUr0yc63mLk08pAC0+sHQDnV/mNAD8ha/B2olICouT/MjE+U/BXBZnOZ0
0eylsf4yC90e8KrEwgPfPmfXHW6+R2N7s+ml9kmHVgDatTHNFYBZa/13xNtAWbv9dX9qv9v59neb
LlQAQpcPd71HsuWysmCfwGcfhhOxOjW0Dk649QvHbh9bZ/vkxOUbsv3z4PYahM698XDzPRq7rWy7
dRYA2562XW37Vrba/+EurdhoA+RqRaxM8wWg3G1/O4ITKnGhQb7z504Hzzv4anlbb7+tY3P9+/lt
PeYud+vk2O2wNrnIH0HK8a8ZaFVcdpVWxGT57/239bZpzZK16Vrvbn97F4Kfh7tum95/RL3N361P
iP18cFn8tO58W19TYjssbqdoVVy+/36HeZGp/imgcvf4ZB+DHO7+fyi/Y+VsdgWg7WMXADfDj1wA
GnYdKADJqenKLqlRact+lbW+ERq40zKVkVfiHijbVFpVo9UxyeozMUE3DSvQnWMa9MCkNt0xZqtu
GLpVv+vXrB/fl69Le8Ro0IQ1Ss3IUsVm164qG0NPAXQWADdPCsCJYIdK3UBrr5ZPjeyvWU/9l+58
8He6akyyRiS85rbRLtU0H1oAQoWxpMXtqdc1Kjd5tGYN+r1uveg3Ov+8e3VVj2F6bMIUDRo3WS+9
MlHPDX5Kj3S7Qvfcea26jZilFxK3KbZ6vza173OtuUgrx/1VQ6//P7rnvu56ZGmzFpZKpa4AVDa5
5Wp91xeAlKWPadoT/6m/9rhG14zL0tgkG7j3qLpljyp3WgFw//yPPKVe/3mTuv1hjF6MadKaljdd
gd3r/gn3anNFukrXDFPvR3rr/14zSr8anKRlrgCUb99LAfiMhCsAeVYAbFCo3OoGlYN7WB/GprUH
YtsrtkPj9vy4Hc49Fvnusn5PsLLtwHUfOb8PYu8YsMsUuD26ioadik0r+8ACYH+36Wx6u5xdPtz1
HskGXTu128qer7flDrc+XVLn1tvdbvbWP7sdQ9cffr5HY9Pbstj2s+14oACklPp3PhxZAIo6CoAN
6jZPG+APcgP9AYf/zQZoOwpgTwfYzontSBa5nQF7/DL2ux21zHODvw3ofto6N864af009sLgjhcH
21FEu6/YtH457PrtMjaPjvmZA7+7vx3gfg+VBVcA3OOVFYDVn3kB2PW2uwHsU5fcXpqbcVcVN+72
L2RIz7UCkKasoir/EbCl7sEzp7ROyWkZ7m9FKqxtUWlllS8AT42L1R/7JOvyJ9L0x6fS9LtHU3Vp
7xRdeH+izr0jRr95cI2GTlznjwCUb2pQnn21cMcRgPzqZj9PW9Zwy4Pjqd0XgBL3T5EePUjzOp4C
uGl8ml5Ofs3/Q9U02/t4D79MUYPbC3eXKanfrOz0lVo54Qk9+ddf67yfnq3vnHW2Tj/rBzrjrLN0
+g/O1k+uu0+3jVipCYmblbrJ3a/cXnnVNjf41pVotX8b4Lf1wEO99FRkixaXuQLgHhArm9xyuQJg
A3RaZD/N6neq7n70Fv1lUq4mpL7mlrezALj7UkOSFvQZ0HEEYIJGxjVrXctbKu4sAJVZKl0/Uo8/
/aS+fcsr+sNLqYoqd3torgD4Q9GHrRuOBxsQzNqUMo23ArAsUfkVzf470W0gzywP7V11lQ0WNoBZ
AfCD4THqLAC2DHad4eb1QTKNW3Z7J0uVW7+49HJNtAKwJNGd36K6HW/4U/vdzre/23Q2vV3OLh/u
esOydbbSYwWgNvz6dIVfZ3e72Vv/jmWdjS27LYttP9uOtj1tu9r2rd5q/4e7DxSAxdHp/psSK9x6
22F9v+1s4D2g7RAHz+8cfG1Qt3UudMtd5AqMDeQ2wHtu8LcB3z9d0DmtlUJ3vv+723nxbPB3l7Xi
Y+tt32vir99Nbz+bzvke+N2us5P7vXN57PHKjuKsiS/QKzPWaF5UmrtOt37u8am4C2Ocjdemfvsb
att13AuAewBs2uNuzG1+kE9ITPB7/FmFFa4IVCo1K9edl6gke5VsXpGyc3K0bkOcxs3eoMdHb1DP
F9eq1wur1WtotHoOidaDg1bq3uei9cTwNZo+f50Sk5KUk1+otKw8Jbif7UWABTUtfp4UgBOBbf/9
biB0bTwtUusW9tH4WeP00upyLS2wkhZ6tf3hBcBsdwOvG8y3SjVbdmtT6Tqtmt1PPbvfqiuvul5X
dPjjTXfob0Mi9GJ8uxI2va1NrbtV7QpFaYu77k2blLR2hiLGPaEJM+dqespWxVS/4ZelrNEtV/Pr
vgBkpyzR6gVPaeysSRq+tlqRhfaq4l3+AaRs61a3HCVaP2+Zpj78qiaO2qDFuVuV3LTPl8xSp7qm
UiVZazRt/iI9OHaDBi0vU3z1dpW55aYAfDaOLADzliepsGqLqra85vdosyoOPsCeTGxQtmUvdv9X
NVv2KCGzMlQAFncUgPaOAuB+t/Pt7zadTW+Xs8uHu94TnS27bTfbfrYdbXt2FoCaIwrAktUZ/kVz
FR1lz29rW++u6Jhfjvs5x76N1E4PWQ7viGnDXd6O8BzKrqfzb6HrPvrvnef5be2UusciK3HrEu2L
n46hAHT4WAWgxRWAll3vuAdDa0TtfsZd4x6MbTDe5BpoYbkSk1OU6AZ8eyrAJKWkhl4Y6M631wck
u98TEpO1ITZJqzckadX6RK1al3CYaGfNhkRtjEvyl7XL2KkVADvKYN8CZfO0ZQ2/TDiuOrZDUW2z
8itr3T9kvTKsFbvWbOfbIa7DpvfsbVw7VdK41z2Q73ENuFUFldVKyilRTHqRUxyS6Qbbomal17oB
v3GPP+xX6gbd0Dy3q6C6QbllNcoqb1S2NXXXzA/M88ByNbm9ihq3dxRarrzO5bLBu8GWo83vdWQX
NCirtEW5dsjPXzbEvpSluM6+eatJKfY8a9U2Nx+7bOj6cfzZgGDWpZZ3HAFIUoEbOOzz0IvdnlqB
bcOTlC17edNu1bbuUXxGxYEjAPbc8ab2N/1p5xEA+7tNZ9Of7Ots2822n21H2562XW371ti3ibrB
MDK2IHQEYFW6SlwBqLay4HZW7XC+Xf6gg4fFDzr8bwfne+TfD9X5t3A+yrTv17nO9rMVGSsAaxIK
OwpAuuxtfZVu/bryGON3hJ36HW9+9AJw6yEFYMvud90Dsj2Augc9N+OuKvWXaVd+VaPf68/ML3FK
QwrKQkcDXDmwnzMLypVtLxIsq1RpRaXKKt1pB/u5rKpS5VVV/qmC/NJKf9nMfHc5d512HfZUgH0s
pM0z3LLgeLM7oQ2ibkB0e9zlbW6Pfts7qnMPSnYYPvR3J8xlQ3dgd1l7KsBdtnLbe6rfIzXvPZx9
PkWd29sud3v1ocuE2Hv0y1rfUuUOm+ebqm6xD/cJLcvB67ajBW+owi1X7ba33XLt9st1YBr3oGOv
Byhve0PVe95STft+9/edKutYJ2OfZVDcvF/VbprGHfu1aeselR1YfueQdcLxUe4GBLM+rVwTZq/T
rMXxyi5t0Oa2vdq0zW2jtv2qcwPHycaW29S7dahu3qX1ScX+1f6zlia7Pc0t2tz+lj+13+18+7tN
Z9N3Xjbc9Z7o/LK7dbDtZ9vRtqdt1/VpFf6dDxVuMIyKCw2QCyJDbwPcvO3g7WWfgtclnfMMd96R
fzvy90+aX/bQ16WXu8ebqJhc/xXPC6IzXKlxBcCVoa6Mc35Hx6l39422XW8e/wJwmM4HRf8AGnoQ
tfNC5x/83fbi7DDtB7FpDr0+fz1+ry3MfPHZs0Pmbm/e9ujL3P0o9BXAXdRx2fLm11zbP5zt3ZT5
Pf/3X84O0dtrAso+YJrQdds0R1sud55d3jVxux7/ArMj/m7XYX8LLctHXDd84joLQEJereYsT3ED
RoIbDIv89wEUVrWquGarPz3ZFFVv9cueX9milNwaLVubqemL4rRsfa7fK6zb/oY/td/9+e7vNp1N
b5ezy4e73hNd5/ay7Wfb0banbVd7N0W1GyytAMSkV2rWkkR/dMDe/phT2ujW92Tf1q3KK29SYlaV
IqLT/TaNiiuSvbivcstHKwANn0QBsAfUknp7gOs6Wwj/s3+QdA+07kHcn36S7Dr99e45fJ4AAscX
PsdeXBWTbg+eGZoZEe/Eac7SRM1zg4QNFCebecuT/bLbJxtOX2jrkqTImHwlF9iRz3ZVbdnnT+13
O9/+btPZ9HY5u3y46z3R2bLbdrPtZ9vRtqdtV9u+lbYT0LxH2eVbtC65TAui0jumiztw2SOv72TQ
ua3taMcMN/DPdYUn2g3+9tHIJW4n3NY53H3/SH4HxWl0BWDbZ1EADuf2oD5V4eYJIEjKbGejQ37N
dsWkVWrOshRNnL3eHzqeMGud//lkZMtu6zBl3kYtXZuj1MIG/5hs61reaEexQo/Rdr793ab7R1ln
+9m2o21P265+nf1RN8c9/udWtmltUplmLkl003dc7qRf7/Wa6kpcZEyBMkqaD7t/H3m/D+cTKwCt
e97r2MM++M8FACeqcv+0zm7lVbcpOX+zYjOrtTGjKsR+Phn55a9WXHat//raok3tqmh2e8Gd6+zY
73a+/d2ms+lP/nWu8tvPtqNtz0O3r6noGJvsFfSJeZsOu9z7ru9k0bHs8Tm1/kuUSjbv9Nu2c527
wj8N6jTtfPsTKgCHXDkAnMhskLDXilRt2avq1n3/MKocex7YDgWHXuNyCPe7nW9/t+nCXf5kZdsx
9Nqfg4N/p3/obd1ylG39IT6ZArCtowDY8w62AB+gcyNUuAUGgM/SgUFw637VtL3+D8XWqXJLqAgc
uc52/j/qOneWn0PXuXO9/bZu+0fd1keuc+j1D+HG4U42XptPvwD4prHLbYD9atwjuRMAAPApaH5N
vhz4dx454cblT6wAbHUFwN6GZU8D2F5+OPb8hL0FKr9mq7IrmpVZ2qiMknqnAQAAfCz1blxtUHZ5
k/KqOr4rwI27/nUgYcZk//Zmp3nnO74AbPhIBeCWW9sXL1neUQD0gQWgeuvr2rT9TSVkl2vwiPG6
58GH9be7H9DNd3TTLXd01613AgCAY2Hj6M23d9Ntf79Pd9//kPo+/6JWJ+Sotu0N582w4/L7CkBM
vO65p9u755//s0+2AGza8bZa9koR0XG66Fe/0b/8y7/qa1/7mr71rW/rlFO+5ZwCAACOkY2n3/jG
N/SVr3xFZ5/7I02YsUgNO99T4y43PocZl49bAdjc/o627JNmLl6ls84+V//y5X/W7377G93bvZvu
+vsduv1vfwUAAMfgzjtu9+Pptddcrf/8v/+hr3/jm3pp3FRfAJp2f8YFoPMIwIyIVfrxT8/XWd8/
U8OGDtXGmBhFR0dr+fLlAADgGERFRSk2dqMmT5qon5//v/remWf5AlDf/u5nfwTg0ALwk59doHPO
/oFGjhih5ORkxbgSsGbNGgAAcAzWr1+vlJQUzZgxXRf+4gKd8f2zT7wCMHPxal8AfnDW9zVk8GCt
W7dOkZGRWrJkCQAAOAZ2FMBKwIQJ4/0RACsAw1+ZRgEAAOAfGQUAAIAAogAAABBAFAAAAAKIAgAA
QABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAA
AUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAE
EAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBA
FAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABR
AAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQB
AAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUA
AIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAA
AAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAA
CCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAg
gCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAA
ogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKI
AgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAK
AAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgA
AAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAA
ABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAA
QABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAA
AUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAE
EAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBA
FAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABR
AAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQB
AAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUA
AIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAA
AAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAA
CCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAg
gCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAA
ogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKI
AgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAK
AAAAAUQBAAAggCgAAAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgA
AAAEEAUAAIAAogAAABBAFAAAAAKIAgAAQABRAAAACCAKAAAAAUQBAAAggCgAAAAEEAUAAIAAogAA
ABBAFAAAAAKIAgAAQACdVAXg7B+cpWFDhyomJkbR0dF+4QEAwEcXFRWljRs3atKkibrg5+efmAVg
RsQq/fi8n+uH55ytMaNHKz09XfHx8b65AACAj84G/4yMDM2ePUsXXfgLXwBeGjf1xCsA5/74Zzr1
O9/WE48/pnnz5mn69GmaPHkSAAA4BlOnvqr58+dpyJBBOveH5+jU0844cQrA5vZ3tGWfNHvJGv3g
nP+Ru7jOPuv7uvRXv9QlF1/kGwsAAPjoLr7oQv360l/pJz/+kb70xS/o69/4b40YP10NO6Wm3Z9x
Aajb/paa9ryryA1puu7Pt+n0M74PAAA+BZf97o+aGRGtzTve8UcBwo3Lx60AVLnd/5qt+5VZ2qC5
y9Zp9KRZeuHlKRo8cqKGjDKTAADAMZnox9NhYyZr1MSZmr4gUkl51apu3e+FG5ePWwEwZY27Vdmy
V3Xb3vKtxF4XAAAAPjk2vtpRd9vx7hx7jxyP/fkdPv0C4BbAFsIWyF4P4H4EAACfgvqd7/o9fxt3
P/sCAAAAThgUAAAAAogCAABAAFEAAAAIIAoAAAAB9IkWgDJXAEoPuVIAAHBisvHaNH3cAtBKAQAA
4KTx8QrArbe1r4iM1q6972jfu1Lzrnf9FQEAgJPDnrekfU5CYqq6dev+7s9+dl6XCsDOZctXqn3P
m3rDFYDt7lqsRQAAgJPDfisAb0ix8cm6p1t3nX/+z0Z1DPNHz003/Vljx43X+pgEJSanK2Zjgj+E
AAAATg4JiWlu8E/RtOmz9Pe77tKll/5qYscwf/Rcc8012++48853XWN4t1v37u/acwcAAODkYYf9
bRy/66673732uuvevvLKK0d0DPNHj5to8O9///uRF5x//kh7zsBeOAAAAE4eNn7/7Gc/G3n55b8Z
ecUVV4y47rrrrukY5gkhhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCHk4+Zzn/v/
AfuucP+xsGXrAAAAAElFTkSuQmCC</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="form1" children="Controls">
    <Property name="ClientSize">263, 173</Property>
    <Property name="Name">form1</Property>
    <Property name="Text">Form</Property>
    <Event name="Load">form1_Load</Event>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview1" children="Controls">
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="Dock">Fill</Property>
      <Property name="Location">0, 0</Property>
      <Property name="Name">datagridview1</Property>
      <Property name="Size">263, 173</Property>
      <Property name="TabIndex">0</Property>
      <Event name="ColumnHeaderMouseClick">datagridview1_ColumnHeaderMouseClick</Event>
    </Object>
  </Object>
  <Code><![CDATA[

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add modules and custom code to validate the application load
	
	return $true #return true for success or false for failure
}

function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload modules when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

$form1_Load = {
	$Processes = Get-Process | Select-Object -Property Name, id, ws
	$ProcessesDT = ConvertTo-DataTable -InputObject $Processes
	Load-DataGridView -DataGridView $datagridview1 -Item $ProcessesDT
}

#OPTION1
<#
	$Table = New-Object System.Data.DataTable
	$Processes = Get-Process | Select-Object -Property Name, id, ws
	
	Convert-ToDataTable -InputObject $Processes -Table $Table
	Convert-ToDataTable -InputObject $Processes -RetainColumns
	Load-DataGridView -DataGridView $datagridview1 -Item $Table


Load-DataGridView -DataGridView $datagridview1 -Item (ConvertTo-DataTable -InputObject (Get-Process))


#OPTION2
#Load-DataGridView -DataGridView $datagridview1 -Item (Get-Process|Select-Object name,id|Out-DataTable)
#>

#region Control Helper Functions
function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The ComboBox control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the ComboBox's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{	
			$array.Add($Item)	
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
	[OutputType([System.Data.DataTable])]
	param (
		[ValidateNotNull()]
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
	
	if ($Table -eq $null)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($InputObject -eq $null) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($item -ne $null)
				{
					$object = $item
					break
				}
			}
			
			if ($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($prop.Value -ne $null)
					{
						try { $type = $prop.Value.GetType() }
						catch { }
					}
					
					if ($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @(, $Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(, $Table)
}

function Out-DataTable
{
<# 
.SYNOPSIS 
Creates a DataTable for an object 
.DESCRIPTION 
Creates a DataTable based on an objects properties. 
.INPUTS 
Object 
    Any object can be piped to Out-DataTable 
.OUTPUTS 
   System.Data.DataTable 
.EXAMPLE 
$dt = Get-psdrive| Out-DataTable 
This example creates a DataTable from the properties of Get-psdrive and assigns output to $dt variable 
.NOTES 
Adapted from script by Marc van Orsouw see link 
Version History 
v1.0  - Chad Miller - Initial Release 
v1.1  - Chad Miller - Fixed Issue with Properties 
v1.2  - Chad Miller - Added setting column datatype by property as suggested by emp0 
v1.3  - Chad Miller - Corrected issue with setting datatype on empty properties 
v1.4  - Chad Miller - Corrected issue with DBNull 
v1.5  - Chad Miller - Updated example 
v1.6  - Chad Miller - Added column datatype logic with default to string 
v1.7 - Chad Miller - Fixed issue with IsArray 
.LINK 
http://thepowershellguy.com/blogs/posh/archive/2007/01/21/powershell-gui-scripblock-monitor-script.aspx 
#>
	[CmdletBinding()]
	param ([Parameter(Position = 0, Mandatory = $true, ValueFromPipeline = $true)] [PSObject[]]$InputObject)
	
	Begin
	{
		function Get-Type
		{
			param ($type)
			
			$types = @(
			'System.Boolean',
			'System.Byte[]',
			'System.Byte',
			'System.Char',
			'System.Datetime',
			'System.Decimal',
			'System.Double',
			'System.Guid',
			'System.Int16',
			'System.Int32',
			'System.Int64',
			'System.Single',
			'System.UInt16',
			'System.UInt32',
			'System.UInt64')
			
			if ($types -contains $type)
			{
				Write-Output "$type"
			}
			else
			{
				Write-Output 'System.String'
				
			}
		} #Get-Type
		
		$dt = new-object Data.datatable
		$First = $true
	}
	Process
	{
		foreach ($object in $InputObject)
		{
			$DR = $DT.NewRow()
			foreach ($property in $object.PsObject.get_properties())
			{
				if ($first)
				{
					$Col = new-object Data.DataColumn
					$Col.ColumnName = $property.Name.ToString()
					if ($property.value)
					{
						if ($property.value -isnot [System.DBNull])
						{
							$Col.DataType = [System.Type]::GetType("$(Get-Type $property.TypeNameOfValue)")
						}
					}
					$DT.Columns.Add($Col)
				}
				if ($property.Gettype().IsArray)
				{
					$DR.Item($property.Name) = $property.value | ConvertTo-XML -AS String -NoTypeInformation -Depth 1
				}
				else
				{
					$DR.Item($property.Name) = $property.value
				}
			}
			$DT.Rows.Add($DR)
			$First = $false
		}
	}
	
	End
	{
		Write-Output @(, ($dt))
	}
	
} #Out-DataTable

#endregion

$datagridview1_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	if ($datagridview1.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridview1.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if ($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}
		
		$datagridview1.Sort($datagridview1.Columns[$_.ColumnIndex], $direction)
	}
}



	<#IF ($datagridview1.DataSource -is [System.Data.DataTable])
	{
		# Get the current Column

		$column = $datagridview1.Columns[$_.ColumnIndex]
		$column.Name
		# Direction Ascending
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		# If current st
		IF ($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$global:direction = [System.ComponentModel.ListSortDirection]::Descending
		}
		#$datagridview1.Sort($datagridview1.Columns[$_.ColumnIndex], $direction)
		$datagridview1.Sort($($column.Name),$direction)
	}
	#>]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>
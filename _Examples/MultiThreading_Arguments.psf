<File version="2">
  <FileID>6ca0c3d3-c223-4047-bf67-578fa0ae79a1</FileID>
  <LastExport>130667694752722681</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAACXZSURBVHhe7d1pcNVloufx7uquqep+OTVvuqd6
XkzVrbrzwq65datmuu7tabvt222rjYiiCAKCoriwubWKLAqioOyCtIDsSNgJCSSBJJB93/d9I8vJ
yb6x6m+e5x8CSTwK2rlC8ny/VZ8Cwjkn58Qiz++cBPwRERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERjdZO/vjHPy74+c9/
XjDhkUcK5s2ZVzBv3nzzIwAAGBXMuf3iC88X/PKXvyj4yU9+UmDOduvb++lPf1r163vu0RtvvKnj
p6KUX9GkkpoWFVf7AQDAXa/FO7fTcku1YeNm/eHee2We1Ov6Mf/N/exnPyuwh39KXqUSC+sVnVmu
6AwAADCanM+uVm6lXzt27tX/+NWvbj0Axo8bX3AkOELJRQ06Zw7/8wAAYFSKzalWWn6VFix45dYD
wH7doLi6WTHZlUbF9R8BAMBoE5VRroqmXm3avOXWA2DBggUFVY2d3hVjAQDAqHUus0LlDd1av+GT
Ww+A+fPnF1TWtys2p0pxAADcJeJzq5VUUKukwjrz4wgxt5VobtPetn0fCXk1N97+tct+H9dvJzG/
5sZjSMw3j2HQ7/3Drt+Ove+DP17W+axKlTeaAbD+dgdAQ4fizJ20d/RrzDuIzzMfrFsJdF0AAL4H
e7jZr2kfCEnU9qAo7Th0bkTY2woKTVJsVoV3MEckFmjXkfP6/GB0wMt/V/23E62T57K8x5BgHsvx
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
AQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEA
AICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACA
gxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMY
AAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAA
ADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4
iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgB
AACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAA
gIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICD
GAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgA
AAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAA
OIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiI
AQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEA
AICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACA
gxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMY
AAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAA
ADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4
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
D4c/TgDA6HFHBwAAALgzGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAA
gIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICD
GAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgA
AAA4iAEAAICDGAAAADiIAQAAgIMYAAAAOIgBAACAgxgAAAA4iAEAAICD/lMGQKe5UXvDAADg7tTT
1aGakRoAVrFRZW7QrgoAAHD3sk/a7ZP3ERkAll0TAADg7jZw+I/YAAAAAKPL9xoAhRd6vCsCAIDR
qaC2S77bHQDz5s0v6rsm+fvkrQYAADA6+bolc6Rr0+Yttx4AkydPLtywcZPWrd/oLQYAADB62cN/
9uwXbz0AiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiOgu6Ec/+v+1ZwpH/IHYNwAAAABJRU5ErkJggg==</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="form1" children="Controls">
    <Property name="ClientSize">679, 459</Property>
    <Property name="Name">form1</Property>
    <Property name="Text">Form</Property>
    <Event name="FormClosed">formMain_FormClosed</Event>
    <Event name="Load">form1_Load</Event>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonServices" children="Controls">
      <Property name="Location">94, 382</Property>
      <Property name="Name">buttonServices</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">2</Property>
      <Property name="Text">Services</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonServices_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonProcess" children="Controls">
      <Property name="Location">13, 382</Property>
      <Property name="Name">buttonProcess</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">Process</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonProcess_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview1" children="Controls">
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="Location">12, 12</Property>
      <Property name="Name">datagridview1</Property>
      <Property name="Size">655, 363</Property>
      <Property name="TabIndex">0</Property>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.Timer, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="timerJobTracker">
    <Event name="Tick">timerJobTracker_Tick</Event>
  </Object>
  <Code><![CDATA[
# Define some argument to pass to the Add-JobTracker function
[string]$ProcessName = "Chrome"
[array]$Property = "Name","Handles"

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add modules and custom code to validate the application load
	
	return $true #return true for success or false for failure
}


function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload modules when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

$form1_Load={
	#TODO: Initialize Form Controls here
	
}

$formMain_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#Stop any pending jobs
	Stop-JobTracker
}

$timerJobTracker_Tick={
	Update-JobTracker
}

#region Job Tracker
$JobTrackerList = New-Object System.Collections.ArrayList
function Add-JobTracker
{
	<#
		.SYNOPSIS
			Add a new job to the JobTracker and starts the timer.
	
		.DESCRIPTION
			Add a new job to the JobTracker and starts the timer.
	
		.PARAMETER  Name
			The name to assign to the Job
	
		.PARAMETER  JobScript
			The script block that the Job will be performing. 
			Important: Do not access form controls from this script block.
	
		.PARAMETER ArgumentList
			The arguments to pass to the job
	
		.PARAMETER  CompleteScript
			The script block that will be called when the job is complete.
			The job is passed as an argument. The Job argument is null when the job fails.
	
		.PARAMETER  UpdateScript
			The script block that will be called each time the timer ticks. 
			The job is passed as an argument. Use this to get the Job's progress.
	
		.EXAMPLE
			Job-Begin -Name "JobName" `
			-JobScript {	
				Param($Argument1)#Pass any arguments using the ArgumentList parameter
				#Important: Do not access form controls from this script block.
				Get-WmiObject Win32_Process -Namespace "root\CIMV2"
			}`
			-CompletedScript {
				Param($Job)		
				$results = Receive-Job -Job $Job		
			}`
			-UpdateScript {
				Param($Job)
				#$results = Receive-Job -Job $Job -Keep
			}
	
		.LINK
			
	#>
	
	Param(
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[string]$Name, 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[ScriptBlock]$JobScript,
	$ArgumentList = $null,
	[ScriptBlock]$CompletedScript,
	[ScriptBlock]$UpdateScript)
	
	#Start the Job
	$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
	
	if($job -ne $null)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{	'Job' = $Job;
						'CompleteScript' = $CompletedScript;
						'UpdateScript' = $UpdateScript}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$JobTrackerList.Add($psObject)	
		
		#Start the Timer
		if(-not $timerJobTracker.Enabled)
		{
			$timerJobTracker.Start()
		}
	}
	elseif($CompletedScript -ne $null)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}

}

function Update-JobTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerJobTracker.Stop() #Freeze the Timer
	
	for($index = 0; $index -lt $JobTrackerList.Count; $index++)
	{
		$psObject = $JobTrackerList[$index]
		
		if($psObject -ne $null) 
		{
			if($psObject.Job -ne $null)
			{
				if($psObject.Job.State -ne "Running")
				{				
					#Call the Complete Script Block
					if($psObject.CompleteScript -ne $null)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
					}
					
					$JobTrackerList.RemoveAt($index)
					Remove-Job -Job $psObject.Job
					$index-- #Step back so we don't skip a job
				}
				elseif($psObject.UpdateScript -ne $null)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
				}
			}
		}
		else
		{
			$JobTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if($JobTrackerList.Count -gt 0)
	{
		$timerJobTracker.Start()#Resume the timer	
	}	
}

function Stop-JobTracker
{
	<#
		.SYNOPSIS
			Stops and removes all Jobs from the list.
	#>
	#Stop the timer
	$timerJobTracker.Stop()
	
	#Remove all the jobs
	while($JobTrackerList.Count -gt 0)
	{
		$job = $JobTrackerList[0].Job
		$JobTrackerList.RemoveAt(0)
		Stop-Job $job
		Remove-Job $job
	}
}
#endregion

#region Control Helper Functions
function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The ComboBox control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the ComboBox's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{	
			$array.Add($Item)	
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}
#endregion

$buttonProcess_Click={
	#TODO: Place custom script here
	Add-JobTracker `
	-Name "Processes" `
	-JobScript {
		PARAM ($Process, $Property)
		Get-Process $Process | Select-Object -Property $Property
 		Start-Sleep -Seconds 5
	} `
	-CompletedScript {
		#PARAM($job)
		PARAM ($Property)
		$results = Receive-Job -Name "Processes"
		Load-DataGridView -DataGridView $datagridview1 -Item $results
		
	}`
	-ArgumentList $ProcessName,$Property
	
	#-ArgumentList "win32_process" `
}

$buttonServices_Click={
	#TODO: Place custom script here
	Add-JobTracker `
	-Name "Services" `
	-JobScript {
		Get-Service
	} `
	-CompletedScript {
		#PARAM($job)
		$results = Receive-Job -Name "Services"
		Load-DataGridView -DataGridView $datagridview1 -Item $results
	}
	#-ArgumentList "win32_process" `
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>
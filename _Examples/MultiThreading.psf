<File version="2">
  <FileID>6ca0c3d3-c223-4047-bf67-578fa0ae79a1</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAACXWSURBVHhe7d1pbNXnoefxVq1Gal+O5k3vqPNm
dDWaFxlpdKW5mqur27npTXubpWka0gSaBQIJISEEQrOzJCwhbGYJhIQ97GDMYhtss3jf993GK7bx
cnyOfbwbCMlvnudvDDacBNL6Buzn+5U+wjZn+zvC/985NuRHRERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERENF6L/PGPf1z2
85//vOyJP/yhbM7sOWVz5rxhfgUAAOOCOW/PeuXlsr/7u1+U/eQnPykz53bru/vpT39a/78eeEBv
vfWOjp86r9LaNl1oCKjyoh8AANz3At55O6e4Shs2bta//upXMk/qdf00/+397Gc/K7Mn/6ySOqWX
Nys+v0bxeQAAYDxJLLyo4jq/du7aq//2y1/eeQA8/tjjZUdPximzokUJ5uSfCAAAxqXkoovKKa3X
3Lnz7jwA7PcNKi+2K6mwzqi9/isAABhvzufVqLatX5s2b7nzAJg7d25ZfWu3d8VkAAAwbiXk16qm
pVfrN3x65wHwxhtvlNU1B5VcVK8UAADuE6nFF5VR1qiM8ibz6xgxt5VubtPetr2PtJKGGx+/7bJ/
jeu3k17acOMY0kvNMYz4vb/Z9duxj33k58tKLKhTTasZAOvvdgC0dCnFPEj7QG9j7iC1xHyy7iTU
dQEA+CvYk5v9nvbBqHRtP3ReO48kjAl7W4eiM5RcUOudmOPSy7T7aKJ2HI4Pefnva+h24hWZUOAd
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
AAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAA
AMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADA
QQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEM
AAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAA
ABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAc
xAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQA
AADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAA
wEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBB
DAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwA
AAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAA
HMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzE
AAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAA
AMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADA
QQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEM
AAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAA
ABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAc
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
AgDGj3s6AAAAwL3BAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQA
AADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAA
wEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBB
DAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABz0HzIAus2N2hsGAAD3p76eLjWM
1QCwKo16c4N2VQAAgPuXfdJun7yPyQCw7JoAAAD3t+GT/5gNAAAAML78VQOg/FKfd0UAADA+lTX2
yHe3A2DOnDcqBq5J/gF5qwEAAIxPvl7JnNK1afOWOw+AyZMnl2/YuEnr1m/0FgMAABi/7Ml/5sxZ
dx4ARERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERHQf9KMf/X8QQi3gOaNBcAAAAABJRU5ErkJggg==</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="form1" children="Controls">
    <Property name="ClientSize">679, 459</Property>
    <Property name="Name">form1</Property>
    <Property name="Text">Form</Property>
    <Event name="FormClosed">formMain_FormClosed</Event>
    <Event name="Load">form1_Load</Event>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonServices" children="Controls">
      <Property name="Location">94, 382</Property>
      <Property name="Name">buttonServices</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">2</Property>
      <Property name="Text">Services</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonServices_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonProcess" children="Controls">
      <Property name="Location">13, 382</Property>
      <Property name="Name">buttonProcess</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">Process</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonProcess_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview1" children="Controls">
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="Location">12, 12</Property>
      <Property name="Name">datagridview1</Property>
      <Property name="Size">655, 363</Property>
      <Property name="TabIndex">0</Property>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.Timer, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="timerJobTracker">
    <Event name="Tick">timerJobTracker_Tick</Event>
  </Object>
  <Code><![CDATA[

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add modules and custom code to validate the application load
	
	return $true #return true for success or false for failure
}


function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload modules when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

$form1_Load={
	#TODO: Initialize Form Controls here
	
}

$formMain_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#Stop any pending jobs
	Stop-JobTracker
}

$timerJobTracker_Tick={
	Update-JobTracker
}

#region Job Tracker
$JobTrackerList = New-Object System.Collections.ArrayList
function Add-JobTracker
{
	<#
		.SYNOPSIS
			Add a new job to the JobTracker and starts the timer.
	
		.DESCRIPTION
			Add a new job to the JobTracker and starts the timer.
	
		.PARAMETER  Name
			The name to assign to the Job
	
		.PARAMETER  JobScript
			The script block that the Job will be performing. 
			Important: Do not access form controls from this script block.
	
		.PARAMETER ArgumentList
			The arguments to pass to the job
	
		.PARAMETER  CompleteScript
			The script block that will be called when the job is complete.
			The job is passed as an argument. The Job argument is null when the job fails.
	
		.PARAMETER  UpdateScript
			The script block that will be called each time the timer ticks. 
			The job is passed as an argument. Use this to get the Job's progress.
	
		.EXAMPLE
			Job-Begin -Name "JobName" `
			-JobScript {	
				Param($Argument1)#Pass any arguments using the ArgumentList parameter
				#Important: Do not access form controls from this script block.
				Get-WmiObject Win32_Process -Namespace "root\CIMV2"
			}`
			-CompletedScript {
				Param($Job)		
				$results = Receive-Job -Job $Job		
			}`
			-UpdateScript {
				Param($Job)
				#$results = Receive-Job -Job $Job -Keep
			}
	
		.LINK
			
	#>
	
	Param(
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[string]$Name, 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[ScriptBlock]$JobScript,
	$ArgumentList = $null,
	[ScriptBlock]$CompletedScript,
	[ScriptBlock]$UpdateScript)
	
	#Start the Job
	$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
	
	if($job -ne $null)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{	'Job' = $Job;
						'CompleteScript' = $CompletedScript;
						'UpdateScript' = $UpdateScript}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$JobTrackerList.Add($psObject)	
		
		#Start the Timer
		if(-not $timerJobTracker.Enabled)
		{
			$timerJobTracker.Start()
		}
	}
	elseif($CompletedScript -ne $null)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}

}

function Update-JobTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerJobTracker.Stop() #Freeze the Timer
	
	for($index = 0; $index -lt $JobTrackerList.Count; $index++)
	{
		$psObject = $JobTrackerList[$index]
		
		if($psObject -ne $null) 
		{
			if($psObject.Job -ne $null)
			{
				if($psObject.Job.State -ne "Running")
				{				
					#Call the Complete Script Block
					if($psObject.CompleteScript -ne $null)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
					}
					
					$JobTrackerList.RemoveAt($index)
					Remove-Job -Job $psObject.Job
					$index-- #Step back so we don't skip a job
				}
				elseif($psObject.UpdateScript -ne $null)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
				}
			}
		}
		else
		{
			$JobTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if($JobTrackerList.Count -gt 0)
	{
		$timerJobTracker.Start()#Resume the timer	
	}	
}

function Stop-JobTracker
{
	<#
		.SYNOPSIS
			Stops and removes all Jobs from the list.
	#>
	#Stop the timer
	$timerJobTracker.Stop()
	
	#Remove all the jobs
	while($JobTrackerList.Count -gt 0)
	{
		$job = $JobTrackerList[0].Job
		$JobTrackerList.RemoveAt(0)
		Stop-Job $job
		Remove-Job $job
	}
}
#endregion

#region Control Helper Functions
function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The ComboBox control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the ComboBox's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{	
			$array.Add($Item)	
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}
#endregion

$buttonProcess_Click={
	#TODO: Place custom script here
	Add-JobTracker `
	-Name "Processes" `
	-JobScript {
		Get-Process
		Start-Sleep -Seconds 5
	} `
	-ArgumentList "win32_process" `
	-CompletedScript {
		#PARAM($job)
		$results = Receive-Job -Name "Processes"
		Load-DataGridView -DataGridView $datagridview1 -Item $results
		
	}
}

$buttonServices_Click={
	#TODO: Place custom script here
	Add-JobTracker `
	-Name "Services" `
	-JobScript {
		Get-Service
	} `
	-ArgumentList "win32_process" `
	-CompletedScript {
		#PARAM($job)
		$results = Receive-Job -Name "Services"
		Load-DataGridView -DataGridView $datagridview1 -Item $results
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>System.Management.Automation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>
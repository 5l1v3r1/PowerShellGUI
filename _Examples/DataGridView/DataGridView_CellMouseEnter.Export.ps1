#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: a8049107-69dd-46f7-880d-8c4b7cf593c8
# Source File: DataGridView_CellMouseEnter.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
2wsAAB+LCAAAAAAABAC9Vl1v2jAUfZ+0/2DlmQEhBFopRKK0rNPoVo2O7Q05yYV6OHZlO7Tpr98N
gYqPZgkTrZAQSXzuObnn+BrvB4RyCSq9pIYS/KGZFD2rVbct/+MHQrzvis2ZoHzIOHyjMfjZws+K
RRMGj9MBcH4jEw1XwoCqP+iZ1zhA5HWCPxAaYtIH6FnjVBuI67+YiOSjrg+livPvGnntUY1M1sLa
9Wb2qZFBwk2ioCcgMYryGrlNAs7Cr5DeyQWIXtDtUjd0O/a504bm2blFBErpWTOsN6LPKdbvRzET
m7exSHjPeKQQag2kMEpynXcAtd8q+QDKpOsa/cTIcUg5XLIYRKYLl3ZqxHa8xmZpGfRGRmD5Q2Qq
xQw4A2HG7BkBbqdVI61OqxSUNd7yi962FH4HT8byt6HkE9l2nuw6f1jwaomi19VGkkbFYqbZY6+x
AmzQ5WkZ0QD4m8eFZyz2v8JR4PHKrTuVwEFnDgEjGVKDci3fbrYxRt0KmNzfXF6F5bkex301pK/Y
T4MvIoInyz9MWlFYCrTgPFh5Wd3Zi8QYKd7c2mBFg2pD0Po4h7cMw+1oV+lR7tcOZ2Xbumhb6zjb
qmQit626mJ8aJkwnlI9NyuGChouB5FIVx3x7BOAQCxd7DZiubu7t/KPjsj2V3jw0EZLNkWyJZEeO
BWxWEotroBGKuQY2v1/N9Pwg2MyM46YFhs85rxy+He2Vw+c6Z5g+u1KgXuLXLI3Dzumxp226f7YU
BmT3oq81xGgj6M3a9Z3Uj3UoFWfBCaLgNV6q7rPk4XsPjpMHvJwx22fvQ6ToIxPz/+FqOjN31p3Z
duQ2qUPLuX7H/F3eaSAVnJ7o5TKPvNfY/jPv/wUDXtte2wsAAA==#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.3.130
     Generated on:       2016-11-22 10:13 PM
     Generated by:       Francois-Xavier Cat
     Organization:       LazyWinAdmin.com
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2016
#>
#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-DataGridView_CellMouseEnter_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formLazyWinAdminDataGrid = New-Object 'System.Windows.Forms.Form'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$buttonProcess = New-Object 'System.Windows.Forms.Button'
	$datagridview1 = New-Object 'System.Windows.Forms.DataGridView'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formLazyWinAdminDataGrid_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	#region Control Helper Functions
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	#endregion
	
	$buttonProcess_Click={
		#TODO: Place custom script here
		Load-DataGridView -DataGridView $datagridview1 -Item (Get-Process)
		
	}
	
	$datagridview1_CellMouseEnter=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		#TODO: Place custom script here
		
			
		
		$label1.Text = $datagridview1.rows[$_.RowIndex].Cells[$_.ColumnIndex].Value
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formLazyWinAdminDataGrid.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonProcess.remove_Click($buttonProcess_Click)
			$datagridview1.remove_CellMouseEnter($datagridview1_CellMouseEnter)
			$formLazyWinAdminDataGrid.remove_Load($formLazyWinAdminDataGrid_Load)
			$formLazyWinAdminDataGrid.remove_Load($Form_StateCorrection_Load)
			$formLazyWinAdminDataGrid.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formLazyWinAdminDataGrid.SuspendLayout()
	#
	# formLazyWinAdminDataGrid
	#
	$formLazyWinAdminDataGrid.Controls.Add($label1)
	$formLazyWinAdminDataGrid.Controls.Add($buttonProcess)
	$formLazyWinAdminDataGrid.Controls.Add($datagridview1)
	$formLazyWinAdminDataGrid.AutoScaleDimensions = '6, 13'
	$formLazyWinAdminDataGrid.AutoScaleMode = 'Font'
	$formLazyWinAdminDataGrid.ClientSize = '562, 262'
	$formLazyWinAdminDataGrid.Name = 'formLazyWinAdminDataGrid'
	$formLazyWinAdminDataGrid.Text = 'LazyWinAdmin - DataGridView CellMouseEnter'
	$formLazyWinAdminDataGrid.add_Load($formLazyWinAdminDataGrid_Load)
	#
	# label1
	#
	$label1.AutoSize = $True
	$label1.Location = '104, 17'
	$label1.Name = 'label1'
	$label1.Size = '35, 13'
	$label1.TabIndex = 2
	$label1.Text = 'label1'
	#
	# buttonProcess
	#
	$buttonProcess.Location = '12, 12'
	$buttonProcess.Name = 'buttonProcess'
	$buttonProcess.Size = '75, 23'
	$buttonProcess.TabIndex = 1
	$buttonProcess.Text = 'Process'
	$buttonProcess.UseVisualStyleBackColor = $True
	$buttonProcess.add_Click($buttonProcess_Click)
	#
	# datagridview1
	#
	$datagridview1.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview1.Location = '12, 39'
	$datagridview1.Name = 'datagridview1'
	$datagridview1.Size = '538, 211'
	$datagridview1.TabIndex = 0
	$datagridview1.add_CellMouseEnter($datagridview1_CellMouseEnter)
	$formLazyWinAdminDataGrid.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formLazyWinAdminDataGrid.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formLazyWinAdminDataGrid.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formLazyWinAdminDataGrid.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formLazyWinAdminDataGrid.ShowDialog()

} #End Function

#Call the form
Show-DataGridView_CellMouseEnter_psf | Out-Null

<File version="2">
  <FileID>808d87a6-e71d-4729-85e0-54513b8e521b</FileID>
  <Preview>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
+qu/0s9//nM9/PDDiIiId5U/+9nP9J3vfEcPPvigN241NDTcNJbZg10C4GsGwLVr17Rjxw498MAD
iomJUXh4OCIi4l1lZGSkZsyYoUcffVRXr14lAK5zuwGwc+dO/fCHP9T+/fu1detWRETEu8o9e/Zo
woQJBEBXCABERHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYA
CIAAQERElyUAAiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABE
RHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACIAAQERElyUA
AiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABERHRZAiAAAgAR
EV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACIAAQERElyUAAiAAEBHRZQmA
AAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABERHRZAiAAAgAREV2WAAiAAEBE
RJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACIAAQERElyUAAiAAEBHRZQmAAAgARER0WQIg
AAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABERHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR
0WUJgAAIAEREdFkCIAACABERXZYACIAAQERElyUAAiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAI
gABARESXJQACIAAQEdFlCYAACABERHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAIAERE
dFkCIAACABERXZYACIAAQERElyUAAiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABARESXJQAC
IAAQEdFlCYAACABERHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABER
XZYACIAAQERElyUAAiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAA
CABERHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACIAAQERE
lyUAAiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABERHRZAiAA
AgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACIAAQERElyUAAiAAEBHR
ZQmAAAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABERHRZAiAAAgAREV2WAAiA
AEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACIAAQERElyUAAiAAEBHRZQmAAAgARER0
WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABERHRZAiAAAgAREV2WAAiAAEBERJclAAIg
ABAR0WUJgAAIAEREdFkCIAACABERXZYACIAAQERElyUAAiAAEBHRZQmAAAgARER0WQIgAAIAERFd
lgAIgABARESXJQACIAAQEdFlCYAACABERHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAI
AEREdFkCIAACABERXZYACIAAQERElyUAAiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABARESX
JQACIAAQEdFlCYAACABERHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAAC
ABERXZYACIAAQERElyUAAiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFl
CYAACABERHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACIAA
QERElyUAAiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABERHRZ
AiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACIAAQERElyUAAiAA
EBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABERHRZAiAAAgAREV2W
AAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACIAAQERElyUAAiAAEBHRZQmAAAgA
RER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABERHRZAiAAAgAREV2WAAiAAEBERJcl
AAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACIAAQERElyUAAiAAEBHRZQmAAAgARER0WQIgAAIA
ERFdlgAIgABARESXJQACIAAQEdFlCYAACABERHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJ
gAAIAEREdFkCIAACABERXZYACIAAQERElyUAAiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABA
RESXJQACIAAQEdFlCYAACABERHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkC
IAACABERXZYACIAAQERElyUAAiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQ
EdFlCYAACABERHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYA
CIAAQERElyUAAiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABE
RHRZAiAAAgAREV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACIAAQERElyUA
AiAAEBHRZQmAAAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABERHRZAiAAAgAR
EV2WAAiAAEBERJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACIAAQERElyUAAiAAEBHRZQmA
AAgARER0WQIgAAIAERFdlgAIgABARESXJQACIAAQEdFlCYAACABERHRZAiAAAgAREV2WAAiAAEBE
RJclAAIgABAR0WUJgAAIAEREdFkCIAACABERXZYACKAnAuBHP/qRwsPDtX37dkRExLvKvXv3auLE
iQRAV243AOzOve+++7zC2rRpEyIi4l3ljh07NHr0aD3yyCMEwI3cTgDYHXn06FH97d/+rf71X/9V
3//+9xEREe8q7UHqP//zP+vZZ5/1DlwJgE5uJwDsTqypqdG5c+eUnZ2NiIh4V5qbm6vS0tJbBn8r
AdCNALDandnS0oKIiHhX29TU5DuOEQDdDABERMR7WQKAAEBExF4oAXAbAWD/DNDY2NirvHjxou++
sNrr/JZxWb+/qyEi3gsSALfxHoDq6mqdP3/eezNgb7G8vNx30LPT7HV+y7iqfeztc4AIQMR7UQKg
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</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="form1" children="Controls">
    <Property name="ClientSize">532, 563</Property>
    <Property name="Name">form1</Property>
    <Property name="Text">Form</Property>
    <Event name="Load">form1_Load</Event>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview2" children="Controls">
      <Property name="AllowUserToDeleteRows">False</Property>
      <Property name="BackgroundColor">ButtonHighlight</Property>
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="Columns">
        <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="ColumnTime" />
        </Item>
        <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="ColumnComputerName" />
        </Item>
        <Item type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="ColumnMessage" />
        </Item>
        <Item type="System.Windows.Forms.DataGridViewLinkColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
          <Reference name="ColumnResult" />
        </Item>
      </Property>
      <Property name="Location">12, 367</Property>
      <Property name="Name">datagridview2</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="RowHeadersVisible">False</Property>
      <Property name="SelectionMode">FullRowSelect</Property>
      <Property name="Size">512, 184</Property>
      <Property name="TabIndex">4</Property>
      <Event name="CellDoubleClick">datagridview2_CellDoubleClick</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonService" children="Controls">
      <Property name="Location">93, 338</Property>
      <Property name="Name">buttonService</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">3</Property>
      <Property name="Text">Service</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonService_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonProcess" children="Controls">
      <Property name="Location">12, 338</Property>
      <Property name="Name">buttonProcess</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">Process</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonProcess_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview1" children="Controls">
      <Property name="AllowUserToDeleteRows">False</Property>
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="ColumnHeadersVisible">False</Property>
      <Property name="Location">12, 2</Property>
      <Property name="Name">datagridview1</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="RowHeadersVisible">False</Property>
      <Property name="Size">512, 330</Property>
      <Property name="TabIndex">0</Property>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ColumnTime">
    <Property name="HeaderText">Time</Property>
    <Property name="Name">ColumnTime</Property>
    <Property name="ReadOnly">True</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ColumnComputerName">
    <Property name="HeaderText">ComputerName</Property>
    <Property name="Name">ColumnComputerName</Property>
    <Property name="ReadOnly">True</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewTextBoxColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ColumnMessage">
    <Property name="HeaderText">Message</Property>
    <Property name="Name">ColumnMessage</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Width">300</Property>
  </Object>
  <Object type="System.Windows.Forms.DataGridViewLinkColumn, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ColumnResult">
    <Property name="HeaderText">Result</Property>
    <Property name="Name">ColumnResult</Property>
    <Property name="ReadOnly">True</Property>
    <Property name="Resizable">True</Property>
    <Property name="SortMode">Automatic</Property>
    <Property name="Text">Load Data</Property>
    <Property name="Visible">False</Property>
  </Object>
  <Code><![CDATA[

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add modules and custom code to validate the application load
	
	return $true #return true for success or false for failure
}


function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload modules when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

$form1_Load={
	#TODO: Initialize Form Controls here
	
}

#region Control Helper Functions
function Sort-ListViewColumn 
{
	<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.

	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.

	.PARAMETER ListView
		The ListView control to sort.

	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
		
	.PARAMETER  SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
#>
	param(	
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ListView]$ListView,
			[Parameter(Mandatory=$true)]
			[int]$ColumnIndex,
			[System.Windows.Forms.SortOrder]$SortOrder = 'None')
	
	if(($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
		try{
		$local:type = [ListViewItemComparer]
	}
	catch{
	Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@  | Out-Null
	}
	#endregion
	
	if($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort()#Sort the items
	}
	else
	{
		if($Sort -eq [System.Windows.Forms.SortOrder]::None)
		{
			$Sort = [System.Windows.Forms.SortOrder]::Ascending	
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder) 
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param( 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[System.Windows.Forms.ListView]$ListView,
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	$Items,
	[int]$ImageIndex = -1,
	[string[]]$SubItems,
	$Group,
	[switch]$Clear)
	
	if($Clear)
	{
		$ListView.Items.Clear();
    }
    
    $lvGroup = $null
    if ($Group -is [System.Windows.Forms.ListViewGroup])
    {
        $lvGroup = $Group
    }
    elseif ($Group -is [string])
    {
        #$lvGroup = $ListView.Group[$Group] # Case sensitive
        foreach ($groupItem in $ListView.Groups)
        {
            if ($groupItem.Name -eq $Group)
            {
                $lvGroup = $groupItem
                break
            }
        }
        
        if ($lvGroup -eq $null)
        {
            $lvGroup = $ListView.Groups.Add($Group, $Group)
        }
    }
    
	if($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{		
			$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if($SubItems -ne $null)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($lvGroup -ne $null)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if($SubItems -ne $null)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if($lvGroup -ne $null)
		{
			$listitem.Group = $lvGroup
		}
	}
}


function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The ComboBox control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the ComboBox's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{	
			$array.Add($Item)	
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}
#endregion

function Get-Varformat
{
	PARAM ($name)
	"$(Get-Date -Format 'yyyyMMddhhmmss')$name"
}
function Get-DataGridViewItem
{
	<#
		Add Count
		Coordinate of the item (ROW index/Columnindex).value
	#>
	[CmdletBinding(DefaultParameterSetName = "CellAddress")]
	PARAM (
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		
		[Parameter(Mandatory = $true, ParameterSetName = "SelectedCell")]
		[Switch]$SelectedCell,
		
		[Parameter(Mandatory = $true, ParameterSetName = "SelectedRowIndex")]
		[Switch]$SelectedRowIndex,
		
		[Parameter(Mandatory = $true, ParameterSetName = "SelectedColumnIndex")]
		[Switch]$SelectedColumnIndex,
		
		[Parameter(Mandatory = $true, ParameterSetName = "SelectedRow")]
		[Switch]$SelectedRow,
		
		[Parameter(ParameterSetName = "SelectedRow")]
		[int]$ColumnNumber,
		
		[Parameter(ParameterSetName = "SelectedRow")]
		[String]$ColumnName,
		
		[Parameter(ParameterSetName = "SelectedRow")]
		[switch]$AllColumns
	)
	PROCESS
	{
		IF ($PSBoundParameters['SelectedCell'])
		{
			foreach ($SelectedCell in $datagridview1.SelectedCells)
			{
				New-Object -TypeName PSObject -Property @{
					RowIndex = $SelectedCell.RowIndex
					ColumnIndex = $SelectedCell.ColumnIndex
				}
			}
		}
		IF ($PSBoundParameters['SelectedRowIndex'])
		{
			foreach ($SelectedCell in $datagridview1.SelectedCells)
			{
				$SelectedCell.RowIndex
			}
		}
		IF ($PSBoundParameters['SelectedColumnIndex'])
		{
			foreach ($SelectedCell in $datagridview1.SelectedCells)
			{
				$SelectedCell.ColumnIndex
			}
		}
		IF ($PSBoundParameters['SelectedRow'])
		{
			
			
			#[System.Windows.Forms.DataGridViewRow]
			#foreach ($SelectedRow in
			
			if (-not ($PSboundparameters['All']))
			{
				foreach ($SelectedRow in $datagridview.SelectedRows)
				{
					IF ($PSboundparameters['ColumnNumber'])
					{
						
					}
					IF ($PSboundparameters['ColumnName'])
					{
						# Get the Selected row
						$SelectedRow.indexSelectedRows
						# Get the value for the $ColumnName of this row
						$DataGridView[$ColumnName][$d]
					}
					ELSE
					{
						$SelectedRow.value
					}
				}#foreach ($SelectedRow in $datagridview.SelectedCells)
			}#if (-not ($PSboundparameters['All'])
			if ($PSboundparameters['All'])
			{
				<#
			$SelectedRowCount = $DataGridView.Rows.GetRowCount('Selected')
			#$DisplayedRowCount = $DataGridView.Rows.GetRowCount('Displayed')
			if ($SelectedRowCount -gt 0)
			{
				IF ($PSboundparameters['ColumnNumber'])
				{
					for ([int]$i = 0, $i -gt $SelectedRowCount; $i++) { }
					$SelectedRow
					$datagridview1
					
				}
				if (-not ($PSboundparameters['ColumnNumber']) -and -not ($psboundparameter['AllColumns']))
				{
					$datagridview.SelectedRows[]
				}
			}
			#>
				
			}#if ($PSboundparameters['All'])
		}#IF ($PSBoundParameters['SelectedRow'])
	}#PROCESS
}

$buttonProcess_Click = {
	$Result = Get-Process | select Name, path
	Load-DataGridView -DataGridView $datagridview1 -Item $Result
	
	$varName = (Get-Varformat -name "Process")
	New-Variable -Name $varName -Value $Result -Scope global
	
	$datagridview2.Rows.Add($(Get-Date), "ComputerName", "Process List", $varName)
}

$buttonService_Click = {
	$result = (Get-Service | select Name, state, status)
	Load-DataGridView -DataGridView $datagridview1 -Item $result
	
	$varName = (Get-Varformat -name "Service")
	New-Variable -Name $varName -Value $Result -Scope global

	$datagridview2.Rows.Add($(Get-Date), "ComputerName", "Service List", $varName)
}

$datagridview2_CellDoubleClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	
	#$SelectedCell = Get-DataGridViewItem -DataGridView $datagridview2 -SelectedCell
	$cellvalue = $datagridview2.rows[$_.RowIndex].Cells[3].Value.ToString()
	#$private:cellvalue = $datagridview2.rows[$($SelectedCell.RowIndex)].Cells[3].Value.ToString()
	
	Load-DataGridView -DataGridView $datagridview1 -Item (Get-Variable -Name $cellvalue -ValueOnly)
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>System.Management.Automation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>
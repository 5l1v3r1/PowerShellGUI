<File version="2.1">
  <FileID>a8049107-69dd-46f7-880d-8c4b7cf593c8</FileID>
  <LastExport>131243444306112885</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADtcSURBVHhe7b13cCTnea+r47LuP/fUrbp16waf
ctk+vnbZpSPLR5Zs+dpKFqksBlmiKIqkJAYziKQ2MOegQJqSKEpMS3LJ3UXOGOQMDNIAA2AGg5zT
IC12sQkbuIy/+349wC4WC4aVdsVd9vNUPbVAT/fX3V/39Pv7enqwHwIAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4oBE24x/+8Ifjf/3XfxX//ve/H7/66qvNaxAREfEc8D+u
vTb+iX/4h/gf//Efx11NN0ddgX9H/uiP/mjXn/zJ/6OLLrxQ993/oMprmjQ4vlPDk7s0NLGAiIiI
Z7EjkwuK9Y7o2S0v6JJvf1t//ud/LgsCWi7z78B/+S/xiy66UC9vT1XHwLSCsQnVd44jIiLiOWKd
2Tm6U0Ullfredy/Thz/84aPLVf7t+eu/+qv43ffcr4gVf9dAMDqqOkRERDynrImMqnt8t557/iV9
9KMfffcA8P0rvx8vqWxQQ9ekpYgxREREPEeti46rZyiuTRs3vXsAuPqaa+Jj8d1q7LYAEBtHRETE
c9RgdExze45o8623vXsAuMYCwOTsHjVZAGiwhREREfHc1D0PEF9Y0qZNm99bAJiY2aPmnik1dk0g
IiKeFt3AMtQbV0vfmdWtw61r9XrXm+90G+o9sW66OrrefKfbd6rXDbEJCwAHTyEAzO6xHZn2Og0R
EfF0WdrYq7yqiPKqo2dGa7so2OWNfl1hdLrb4AV1sTO33qrEv+Whfm99bj9D9m9V66DyvdfP1Hoj
CtR0qrZjxAsfa/va2dg1qenTGgBcp9rrp+K67SAi4gfelUKcW9GulzOqE2bWnBG3uX/Tq5VR3KIm
K37um2wp+Y3eOr3XzoQZCV37BbUxtfbPeEFne1bt8v6umf80mdjXKiXl1qs6PKRQX/ykvnfP851S
AHDPALT2z3q3UU7WCnpsVA3hTjW0Ro/b1qP6jrETbIiMq7Fj1Ozz0tD67SEi4gfZlj6rG1YDnnq5
RHXhfkWHZxUZnDkzDs8o3DORWFdkVCX1Pdqyo0zRwWlFhtaZf0X32ru53nJOe61zZE6ldZ16NqlC
0dEFbc2sU05pi2Kjc2+/7Oq238n1lnXaa7GRWS8IZJa2qW1o7qS+bzand73XAHD1uwSAvlk1tlux
b2y2wt7r/dzY3qeGmoA6cr6t9swLFM68SM1pF6k+6euqS75M9cEaW25mnbamT572O7u2Lfvd0tDJ
r7vp73W9097nK+u/tuyp7sNp22e3bcddf57f0Xdt9x1eW5l+0usrv9u/79anp+rytr5rP6x+feXn
d1ru3do7Da5s97tuO+I5rDu/XQB4elupDSDHVGsDw+q24TNildnRH9dzSeVeACi2APBSerU6rGBW
hQfXWWbI2x73dbl3dkzV7Yn517bh1uk+cqhp6fMCQOfYLr2YUavi2ogNfidtvceXqfKWT/xeG0l8
Ta/OBsvuX7cdx7dl+TUbTK/M79az0o6zwtpts/1KzW9QRklY7W8bAA6dSgDYq/DA3AkXp2P2z6mp
w4p+OKbWoV1qGZxXaGBRDZVJGs//iI4MPapD/Q9rqfsO7Wv7gWqf/jPV1pSqZWDn+u2dJldOsnfW
dciUHRD7d93X1/pe2jwF3QHx7oSs89rvoNuXZju5mm1/WvpnLLStP19C9/rMOtNP1M1zvF3b1nXm
SfTh+q95umOxzvFInJBu/99r/7+biX12b7Bj/bDufO/kaT7Gp6p3TiS2/13P4fdw/BDPRhPXlbie
2V6m5i739bSJ5QJ3+q01XbF3AcB99l/S0KuXMmoUHZ6zgjty0vzub97kVoZ1z8O/0S2bH9GG2392
krfc+hP94pkUL0C4v467tg23Tne9rGnt13PJlYqN79ZLmXUqqu1Uq11j3Gf0Low43TYEo4nteD6l
ULfd87hu3vSw7rz/CeVWhJVR3KTb7/2FN+2O+35p7ZR7X+erc+HAtWFtrQSFmvYRdQzNKjXQ6N0B
6BieP6nv3bV25lQDQJsVdnfQ1hq26c3eyL9LrWN71DpqIWBkr4LlOzRS+G/S/kppZ6o0+2tpZIOK
f/03qq4us+UWjrfjwkVvtwpyylTWPmVhY/aEdZyqbpvqLGTkB3vV3LdT7cPW4XU1yilsUn3/gtoH
ZtTUXK/sqg7VBuuUUxxS0OYL2/T12nO61yorCpVW1GIJanbNNtrvdoI1R9qVl1Opyq5Ztb1DW55u
+VhUefkVts+Tid/Xm+9dnVPb8LhtW6lSdqQqOS1TyenZyqnpswNt27XuMlY4lot2Iiisb9vgrELt
rcrOylZyaoZ2pOQptzqm0ND8cruuH+JqaG5QdkG9anvnjvVh2JZtjrYrP79O5c0RBUrKVdExrfZB
m8fSeH1jnXJroqqpteNSGlZD/zv3/7trfT4YV7C5WdkZ6UpKy1ByVoUq2ifUaus8YV4738L9fSrK
LVNp26jqW0PKy6tXcHBSlWWFSsqsUbBr2tt/N394yMJqW6uyrM2cYL9Cdn69Xb/+brptn7H3UEiZ
Sam27VnW3+nKqe5R09uel/ZG7raQsBzkEM8l3fXTFaNnd5SrxQJAU/eU93T6mTJqRXFLcoX3FbjS
xj7vM/jYyLz3+9p52+z9/tMnXta27RkaG5tUPD6jmelZTZszM7OanIxr3Kbffe9jyi5v9d6Da9tw
gabV9q+2dUBbUqrUNbGol7OCKrEAELb3riv8LowEbUTv/m3otBBho/+Nd/xUDQ0hb52BQJkFjZ/q
5lsfUXlFneJT0yovr9Hmu/9TjdZfQe8v87o2juvadcEmPdCkrLJ2RUZ2ntT37po/s9sFgPfwh4C8
ADC3V+3WKe6grdV1VqhrWPXFBQrueEnV215QbVaOaotfVk/WP0lTj+nNwVv0Zve39Hr4H5X1s/+m
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
sRwcVnT9OGDX5MyikAK1Me9O4sn9v0fze185hQCw040893sHba098f1q6x6yUb27rb9Tjc2tivZY
Ma9o0JUP1+jSe6v1zdsr9NUflyopu9oK9YAaQ2GvqLmL9vG2bMPGFmzkM+99jzFq6ckr4hNuNGTT
bLTvPqt2xsZ22rqW57PU1zd/RF293SosKrXRkyugq7bRze9GiN7vyyMhb92rXrcT0f2cCCXLr7l1
eb+vvL56W11wcXcwXGGzn2173F0Ld0veW8Z73f28sh7bt+Xp3rLefO61VdOX13fC/Me2+91127O6
71wwc9vm7ty4tr0RpY2KE+tL7EtszOZf6WdLyG4fVvrZa9fa6LVRtms34vW1veZGl26fve1b01fW
zvH+mDuhP45t55rfj/f/qmVtXe7zQfd8yfF12bzevtiof+zk4+F0IdV91u3tq9cPtr1uurfNif1I
tG37bO0ca3dV3yemrRy3xPq89a5+7Vh71tbwvHd+eetw67Jj5/WX237bTm9+r/9dH9o54j6y8ZZ3
bbtvPiTacLfl3HGP2XvI9Z23/TZCcg98euv1tse2wdtWt32J5V27rs1j7XnblFjWC46rlkU8W3Tn
q3tvuM/lO20U7I1ovaJ2ou72uhuRd47vtfPcfQy9RpvuPvt3Xz1uc1/XXrP8igO2vq0WANyoubZ9
VEk59RqaOWDFe535rR3vq8zL7b/det12ue07afllXX1ojo5ZAKjT6K4jFgCaVdVkA2W7TrnX3bJr
dXcx3EcQMfeNK1vefSXRPdzofk5Mc9/Ic984cg86J5ZxYcALCqYLAINW9LOLWy28dGnQBq0n9//e
UwsA0xYA+qyzEhfSE3XBIDo0rWYbKYfaIt5nnZ7tUbWaLe0R+zeicIf7OerN1xrtXV7eFamVtqzY
WFvHtd/j1r4FjGPTrOM87ec+zwPeqCvc3q6SUhu5NY6px3beuwW6rLe8Kwwr05bbWO/3E+Zdnn7c
5fk93e9u3uWfl7fHm89tt9eWm2dlPcvTl9s4/lriX2/68rTEtruf12z3u3hCP3nbsvo1a+/Y9OV1
LE9zd0sS27B62eV5Tphv5bWVNhPzHZtnZZnV83s/L0/3dPOtWs705jn2e2LZ1cuftIyb/4Q2T9Rr
b7mN1X2+sl2Jtt30FZdfc64sbx5bZnl6ou2127F6OxPznDB95bUTpq20Z/8u9/mxNpbnO+bKNM+V
bUj8fmx7VuZb/fvaZb31IZ49uvPSFSN3B8AFgNGFwxqeP3hGHNl5SMOz+/WCrcuNkt2f0nUPAU7Y
qHxk3l5bZ5nfV9fuuBV99xVndwdgfPEVLwCUN/RocvcRDc3ZeudsXivQCd1yy/+631faOmGeldfX
TlvtQa/9jMKQCuu6NGRtnNT/1vc7TzUA9M8uJS4m6+guYP0zNvI2V/87YMusduU153rtnKpeAJia
U7C6WkU1EbVPHVT/CRd3REQ823Q1w1lQHbNi1WzX75iKz5AltTFvRJxV0uaNfiM2UnYfHeeVhr3X
1lvm99W1W1QdVVqgSWUNfRreeVg14RGl5DepsCpyRtebX9GhVFuP+zbC4Hp12/p9576jpxYABi2x
9FvBPau0EU//9JIG51+xtHRYA+6kiq8zHyIinj2667S7qzy5T6VWIHPKI8qtiJ4RcyoiKqjpUufI
bg3Y4HNw9qD38FxeVaf32nrLnA7dPlWGhhL7avvs1l3bPnbG99X9677e6PbzpH532nYsnHIAmLcA
YAcMERHx99XdwXV3hkcWjmh01ytn1JFdR2xdB711OgfnDtr0M79eN/L37nx7hfeA9/t6851uh5br
9cp6T9D6/BQDwAFr0EbYtiOrHXRaY4iIiHj2ubZuuyC0sO9VCwAb3z0AXHXVVScFAJdoXMOLe/dr
7z5EREQ8G3UPB3rP5K24HAA2bPg9A8A+a3xp/34dQERExLPOMxYAXLpwK9iPiIiIZ50EAERERB9K
AEBERPShBABEREQfSgBARET0oQQAREREH0oAQERE9KEEAERERB96VgSAgwcP6vDhw751vT5BREQ8
k77vAcAV/76+PtXX16uxsdFXNjQ0qKWlRYuLizpw4MC6/YOIiHgmfN8DgBsBu+IfDAbV1dWlzs5O
XxiLxRSNRlVUVKSdO3dqaWlp3f5BREQ8E54VAaCpqckr/vPz85qZmfGFs7Ozmp6eVlVVFQEAERH/
4J41AcCNil1hnJqa8oXxeFyTk5OqrKwkACAi4h/ccz8AzOzU3gNL3rMEzgN7d2tuelKT6817Fnl6
A8A+7TtwWK+/8bpeOWzt7Nt38mtv2muH3GurlzvRffsP6PArr+mN14/owLE2Dus12bJLB95xWURE
PLc8pwNAfHpak73VeuGxB3THrZu1afPt+ukLuYpO7NW8hYD1ljlbPK0BYOmQDu/uV1mgQu1Ds1o6
fHDNa70qza9QZHjOXnub9ViIOry0S4Nt1QqUd2r34UM6+rqMWTVmlCk6vaADB3+fkIKIiGeT53AA
iGtmdlbDFQ/ok//9E/r3a2/SrTdeos99+bt6KLVbC3vmNWNF1hVaTwsL09Pu5+NtxONu2rT3+vFp
cW/atFvm7eZbZ55T1bV12gLAodf11ky2Lv/KD/Trwh4dfvNVHbT2XJtLR97Qm/E0ffeLV+np8n4d
eeuoDq76xoH79oE336FX9NbhSQV+db2+esVW7dIr6sh8Qjde8W/6i//tq3p+YEYHjx56T8cUERHP
fs/xADCj/vKf6RsXPqLwohuuTuilH1+tH9y8VYNHl7TLXndtzs7OmdNeYJizaV6Rn5m1afb6dOKB
vNkZV+QTP7tl3Lyzrui7aXNumi1r/05bGJixf2ddu3PW7szx8HAqnt4A8JrenA3oum//SM+W9VkA
eE2HvI9EbPT/6ls2iM/VNf9+i16qHbay/prX54eWDujA0kEdOnQoMe+RV6Wj0yp9epMuuX6HFt56
RUP1+XrmFz/S5//6Mm0bnNbBVwgAiIgfFM/5ADBQ8TN99UsbldPWr5nRMj103XXadMf9uvOB23Tp
Fz6vi7+1QU++eKvO/+Q/61OfPE8bnyvSyMG9muxJ1Y8+/2l96p8/pc9+52YlhfZq31C+7r7ia/rs
5z6n8y66UclduzXbkq27vvdpfebTn9JXNr2kjp5+5T18qT792X/VP33jP7SlYli7F0792YUzEQCu
/84t2lLapeJfXaEvnneezj/v8/rGLU+qNVatTZdfoq/ZNn/60/+qr33vMYVeeVNv7o3q+Tsv17+d
d76+8OUfKinco7Lnb9elN2zXzJuv6rU3LFO9GdTt/3KtXu6e0BIBABHxA+M5HgDmNFr7c336L/5c
f/v3H9cnP/53+tJ//FLBtkxd+cl/0Hfu26ZA1hO68vx/0caXI2p8fqM+e+EP9XxZqZ64+vO64r5s
NXZU6rd3XasbNvynfrLhSl3yg416cusLevC6i/Tlax/Wbx++WRd+7od6Mu1nuvIbt+hX6Y/rex/7
iu55+Ze69fIf6qafZmtw/y7NrruNb++ZuQNwk7aUD2r3TJsCGZnKTXpU3//WD/Xg44/p+gs+pi/d
tF2N9VV68Mov6fKny9X80u265NtX6fHUXG195Eqd/7Wb9Nh/btRlP0rSrAWAwwcPa99ikW751NV6
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
KAEAERHRhxIAEBERfSgBABER0YcSABAREX0oAQAREdGHEgAQERF9KAEAERHRh572ALCia3gEERER
z0rX1u3TFgBcqkBERMSz07V1+7QFAERERDyHJAAgIiL60FMNADMLSxraecRbEBEREc9R5w5p1/7X
3lsA+OEPr5pb3P+KFg++oYX9ryIiIuI56q4Dr+ngUenHP97w5nKZf3suvvjikU2bbj26aeOmoxsR
ERHxnHbT5luPfutb3zqwXOYBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Pgh86EP/P0wqpG2q9CEJAAAAAElFTkSuQmCC</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formLazyWinAdminDataGrid" children="Controls">
    <Property name="AutoScaleDimensions">6, 13</Property>
    <Property name="AutoScaleMode">Font</Property>
    <Property name="ClientSize">562, 262</Property>
    <Property name="Name">formLazyWinAdminDataGrid</Property>
    <Property name="Text">LazyWinAdmin - DataGridView CellMouseEnter</Property>
    <Event name="Load">formLazyWinAdminDataGrid_Load</Event>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="label1" children="Controls">
      <Property name="AutoSize">True</Property>
      <Property name="Location">104, 17</Property>
      <Property name="Name">label1</Property>
      <Property name="Size">35, 13</Property>
      <Property name="TabIndex">2</Property>
      <Property name="Text">label1</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonProcess" children="Controls">
      <Property name="Location">12, 12</Property>
      <Property name="Name">buttonProcess</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">Process</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonProcess_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview1" children="Controls">
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="Location">12, 39</Property>
      <Property name="Name">datagridview1</Property>
      <Property name="Size">538, 211</Property>
      <Property name="TabIndex">0</Property>
      <Event name="CellMouseEnter">datagridview1_CellMouseEnter</Event>
    </Object>
  </Object>
  <Code><![CDATA[
$formLazyWinAdminDataGrid_Load={
	#TODO: Initialize Form Controls here
	
}

#region Control Helper Functions
function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)	
}
#endregion

$buttonProcess_Click={
	#TODO: Place custom script here
	Load-DataGridView -DataGridView $datagridview1 -Item (Get-Process)
	
}

$datagridview1_CellMouseEnter=[System.Windows.Forms.DataGridViewCellEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	#TODO: Place custom script here
	
		
	
	$label1.Text = $datagridview1.rows[$_.RowIndex].Cells[$_.ColumnIndex].Value
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>
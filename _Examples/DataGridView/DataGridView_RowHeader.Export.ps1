#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 093d49ab-31c3-46dd-ae0a-10eb7543f37a
# Source File: DataGridView_AddColumn.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
eQkAAB+LCAAAAAAABAC9Vl1v2jAUfZ+0/2D5OQpJ+KwUIlE61mlsqwZje0NOcqEejo0cB5r++jkJ
ICjZkk4UISFM7rnn+J5jK+53CMQGZHpHFEH6R0wF72PHtLH3/h1C7jdJl5QTNqIMvpIIvKzwo6Th
jMJ2PgjDoWBJxM11vHAbZ8VFC/83BAqpdA19PEljBZH5k/JQbGNzJGRUfBuo7JGBZjtNLdPKPgYa
JkwlEvocEiUJM9BD4jMafIZ0KlbA+363S9pBu2PfNFtg9W4w4lpKHy90vzF5TnX/QRhRHogIo+CR
slBqFB4KrqRgcbFvLftBijVIle7gg0SJSUAY3NEIeCZJl3YMZDfdxr60CvpFhIC9kWaqxAwZBa4m
9FkDnF7LQE7HrgRlM8deyUYrkVN4Utg7RpmlsA8brWqHGQsSlrLNsyduI6/dA6tDcJsoJfibx8DP
aex/WX8+nrEIiNL02LMdbYXTOZvM38zY0dWoL7zutnX/80iVOEb8TzyEJy2pTnXub30xP2KY0Tgh
bKJSBrckWOlzLiT2pjKBMvxxMHR2g9WBbZ4vX8ShUeShfjqOr503z0ioyZaabKPJXpmU4jq8BxJq
MfdAl4/5IS5Ofn4R6FUNA04TZzu1A3eivXbsnJYel2P1XhU86/x+OPb1dDGIY4j09CHe1+7+Sb0o
DoRk1L+Ag27j0PUlS5GZa3BcPJfVjNnxuA6RJFvKl//DZTUX7UV3Ydth2yJNUs31K2JX2dNQSLg8
0WFZRN5tHL9qeX8AvHvgpXkJAAA=#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.127
     Generated on:       2016-07-28 11:38 PM
     Generated by:       Francois-Xavier Cat
     Organization:       LazyWinAdmin.com
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2016
#>
#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Call-DataGridView_AddColumn_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formLazyWinAdmincom = New-Object 'System.Windows.Forms.Form'
	$button1 = New-Object 'System.Windows.Forms.Button'
	$datagridview1 = New-Object 'System.Windows.Forms.DataGridView'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formLazyWinAdmincom_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	#region Control Helper Functions
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)
	}
	
	function Add-WFDataGridViewColumn
	{
	<#
	.SYNOPSIS
		This function add a column to a DataGridView
	.DESCRIPTION
		This function add a column to a DataGridView
	.EXAMPLE
		Add-WFDataGridViewColumn -DataGridView $datagridview1 -ColumnName $($textbox1.Text -split "," -replace '^\s+', '' -replace '\s+$', '')
	.EXAMPLE
		Add-WFDataGridViewColumn -DataGridView $datagridview1 -ColumnName "First Name","Last Name","SamAccountName","Description"
	.NOTES
		Francois-Xavier Cat
		www.lazywinadmin.com
		@lazywinadm
		github.com/lazywinadmin
	#>
		[CmdletBinding()]
		PARAM (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[String[]]$ColumnName
		)
		BEGIN
		{
			Add-Type -AssemblyName System.Windows.Forms
		}
		PROCESS
		{
			foreach ($Column in $ColumnName)
			{
				
			# Create Column object
			$NewColumn = New-Object -TypeName System.Windows.Forms.DataGridViewTextBoxColumn
			$NewColumn.Name = $Column
			$NewColumn.HeaderText = $Column
			
			# Add the Column to the Datagridview
			$DataGridView.Columns.Add($NewColumn)
			}
		}
	}
	
	function Add-WFDataGridViewRow
	{
	<#
		.SYNOPSIS
			This function add a row to a DataGridView
		
		.DESCRIPTION
			This function add a row to a DataGridView
		
		.PARAMETER DataGridView
			Specifies the DataGridView Control to use
		
		.PARAMETER Title
			Specifies the Title to set on the new row
		
		.PARAMETER Values
			Specities the values to add
		
		.PARAMETER Collection
			Specifies the number of column to add
		
		.EXAMPLE
			Add-WFDataGridViewRow -DataGridView $datagridview1 -Title "Name1" -Values ($textbox1.Text -split ",")
		
			Add a new row with the Title 'Name1' and the values from $textbox1
			
		.EXAMPLE
			Add-WFDataGridViewRow -DataGridView $datagridview1
		
			Add an empty row
		
		.EXAMPLE
			Add-WFDataGridViewRow -DataGridView $datagridview1 -Collection 3
		
			Add 3 empty rows
		
		.EXAMPLE
			Add-WFDataGridViewRow -DataGridView $datagridview1 -Values "Francois-Xavier","Cat","fxcat"
		
			Add a row with the values specified.
		
		.NOTES
			Francois-Xavier Cat
			www.lazywinadmin.com
			@lazywinadm
			github.com/lazywinadmin
	#>
		
		[CmdletBinding(DefaultParameterSetName = 'EmptyRow')]
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[Parameter(ParameterSetName = 'Row',
					   Mandatory = $true)]
			[String]$Title,
			[Parameter(ParameterSetName = 'Row')]
			[Array]$Values,
			[Parameter(ParameterSetName = 'Collection',
					   Mandatory = $true)]
			[int32]$Collection
		)
		
		BEGIN
		{
			Add-Type -AssemblyName System.Windows.Forms
		}
		PROCESS
		{
			IF ($PSCmdlet.ParameterSetName -eq 'EmptyRow')
			{
				$DataGridView.Rows.Add()
			}
			ELSEIF ($PSCmdlet.ParameterSetName -eq 'Row')
			{
				$Row = New-Object -TypeName System.Windows.Forms.DataGridViewRow
				$Row.HeaderCell.Value = $Title
				$Row.CreateCells($DataGridView, $Values)
				
				# Add the row
				$DataGridView.Rows.Add($Row)
				
			}
			ELSEIF ($PSCmdlet.ParameterSetName -eq 'Collection')
			{
				$DataGridView.Rows.Add($Collection)
			}
		}
	}
	
	function Set-WFDataGridView
	{
	<#
		.SYNOPSIS
			This function helps you edit the datagridview control
		
		.DESCRIPTION
			This function helps you edit the datagridview control
		
		.PARAMETER DataGridView
			Specifies the DataGridView Control
		
		.PARAMETER AlternativeRowColor
			Specifies the color of the alternative row color
		
		.PARAMETER DefaultRowColor
			Specifies the color of the default row color
		
		.PARAMETER ForeColor
			Specifies the color of the text
		
		.PARAMETER BackColor
			Specifies the background color
		
		.PARAMETER ProperFormat
			Set the datagirdview to the proper format
		
		.PARAMETER FontFamily
			Specifies the the Font family to use
		
		.PARAMETER FontSize
			Specifies the Font size
		
		.PARAMETER HideRowHeader
			Hide the Row Header
		
		.PARAMETER ShowRowHeader
			Show the Row Header
	
		.PARAMETER HideColumnHeader
			Hide the Column Header
			
		.PARAMETER ShowColumnHeader
			Show the Column Header
	
		.EXAMPLE
			Set-WFDataGridView -DataGridView $datagridview1 -ProperFormat -FontFamily $listboxFontFamily.Text -FontSize $listboxFontSize.Text
		
		.EXAMPLE
			Set-WFDataGridView -DataGridView $datagridview1 -AlternativeRowColor -BackColor 'AliceBlue' -ForeColor 'Black'
		
		.EXAMPLE
			Set-WFDataGridView -DataGridView $datagridviewOutput -DefaultRowColor -BackColor 'Beige' -ForeColor 'Brown'
		
		.EXAMPLE
			Set-DataGridViewRowHeader -DataGridView $datagridview1 -HideRowHeader
		
			This will hide the Row Header
	
		.EXAMPLE
			Set-DataGridViewRowHeader -DataGridView $datagridview1 -ShowRowHeader
	
			This will show the Row Header
	
		.EXAMPLE
			Set-DataGridViewRowHeader -DataGridView $datagridview1 -HideColumnHeader
		
			This will hide the Column Header
	
		.EXAMPLE
			Set-DataGridViewRowHeader -DataGridView $datagridview1 -ShowColumnHeader
	
			This will show the Column Header
	
		.NOTES
			Author: Francois-Xavier Cat
			Twitter:@LazyWinAdm
			www.lazywinadmin.com
			github.com/lazywinadmin
	#>
		
		[CmdletBinding(DefaultParameterSetName = 'ShowRowHeader',
					   SupportsShouldProcess = $true)]
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[Parameter(ParameterSetName = 'AlternativeRowColor',
					   Mandatory = $true)]
			[Switch]$AlternativeRowColor,
			[Parameter(ParameterSetName = 'DefaultRowColor')]
			[Switch]$DefaultRowColor,
			[Parameter(ParameterSetName = 'AlternativeRowColor',
					   Mandatory = $true)]
			[Parameter(ParameterSetName = 'DefaultRowColor')]
			[System.Drawing.Color]$ForeColor,
			[Parameter(ParameterSetName = 'AlternativeRowColor',
					   Mandatory = $true)]
			[Parameter(ParameterSetName = 'DefaultRowColor')]
			[System.Drawing.Color]$BackColor,
			[Parameter(ParameterSetName = 'Proper',
					   Mandatory = $true)]
			[Switch]$ProperFormat,
			[Parameter(ParameterSetName = 'Proper')]
			[String]$FontFamily = "Consolas",
			[Parameter(ParameterSetName = 'Proper')]
			[Int]$FontSize = 10,
			[Parameter(ParameterSetName = 'HideRowHeader')]
			[Switch]$HideRowHeader,
			[Parameter(ParameterSetName = 'ShowRowHeader')]
			[Switch]$ShowRowHeader,
			[Parameter(ParameterSetName = 'HideColumnHeader')]
			[Switch]$HideColumnHeader,
			[Parameter(ParameterSetName = 'ShowColumnHeader')]
			[Switch]$ShowColumnHeader
			
		)
		
		BEGIN
		{
			Add-Type -AssemblyName System.Windows.Forms
		}
		PROCESS
		{
			if ($psboundparameters['AlternativeRowColor'])
			{
				IF ($PSCmdlet.ShouldProcess($DataGridView, "Set the Alternative row color. ForeColor: $ForeColor, BackColor: $BackColor"))
				{
					$DataGridView.AlternatingRowsDefaultCellStyle.ForeColor = $ForeColor
					$DataGridView.AlternatingRowsDefaultCellStyle.BackColor = $BackColor
				}
			}
			
			if ($psboundparameters['DefaultRowColor'])
			{
				IF ($PSCmdlet.ShouldProcess($DataGridView, "Set the Default row color. ForeColor: $ForeColor, BackColor: $BackColor"))
				{
					$DataGridView.RowsDefaultCellStyle.ForeColor = $ForeColor
					$DataGridView.RowsDefaultCellStyle.BackColor = $BackColor
				}
			}
			
			if ($psboundparameters['ProperFormat'])
			{
				IF ($PSCmdlet.ShouldProcess($DataGridView, "Set the Border Header Style to 'Raised', Border Style to 'Fixed3D', Selection Mode to 'FullRowSelected', Disable resizable row, Set the font to $FontFamily with a the size $FontSize"))
				{
					#$Font = New-Object -TypeName System.Drawing.Font -ArgumentList "Segoi UI", 10
					$Font = New-Object -TypeName System.Drawing.Font -ArgumentList $FontFamily, $FontSize
					
					#[System.Drawing.FontStyle]::Bold
					
					$DataGridView.ColumnHeadersBorderStyle = 'Raised'
					$DataGridView.BorderStyle = 'Fixed3D'
					$DataGridView.SelectionMode = 'FullRowSelect'
					$DataGridView.AllowUserToResizeRows = $false
					$datagridview.DefaultCellStyle.font = $Font
				}
			}
			
			if ($psboundparameters['HideRowHeader'])
			{
				IF ($PSCmdlet.ShouldProcess($DataGridView, "Hide the Row Header"))
				{
					$DataGridView.RowHeadersVisible = $false
				}
			}
			if ($psboundparameters['ShowRowHeader'])
			{
				IF ($PSCmdlet.ShouldProcess($DataGridView, "Show the Row Header"))
				{
					$DataGridView.RowHeadersVisible = $true
				}
			}
			if ($psboundparameters['HideColumnHeader'])
			{
				IF ($PSCmdlet.ShouldProcess($DataGridView, "Hide the Column Header"))
				{
					$DataGridView.ColumnHeadersVisible = $false
				}
			}
			if ($psboundparameters['ShowColumnHeader'])
			{
				IF ($PSCmdlet.ShouldProcess($DataGridView, "Show the Column Header"))
				{
					$DataGridView.ColumnHeadersVisible = $true
				}
			}
		}
	}
	#endregion
	
	
	$button1_Click = {
		
		# Add Column
		Add-WFDataGridViewColumn -DataGridView $datagridview1 -ColumnName "First Column"
	
		# Add Row and Row Header
		Add-WFDataGridViewRow -DataGridView $datagridview1 -Title "Header1" -Values "Value1"
		Add-WFDataGridViewRow -DataGridView $datagridview1 -Title "Header2" -Values "Value2"
		Add-WFDataGridViewRow -DataGridView $datagridview1 -Title "Header3" -Values "Value3"
	
		# Set the Row Header to Visible
		Set-WFDataGridView -DataGridView $datagridview1 -ShowRowHeader
	
		# Set the Column Header to Invisible
		Set-WFDataGridView -DataGridView $datagridview1 -HideColumnHeader
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formLazyWinAdmincom.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$button1.remove_Click($button1_Click)
			$formLazyWinAdmincom.remove_Load($formLazyWinAdmincom_Load)
			$formLazyWinAdmincom.remove_Load($Form_StateCorrection_Load)
			$formLazyWinAdmincom.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formLazyWinAdmincom.SuspendLayout()
	#
	# formLazyWinAdmincom
	#
	$formLazyWinAdmincom.Controls.Add($button1)
	$formLazyWinAdmincom.Controls.Add($datagridview1)
	$formLazyWinAdmincom.AutoScaleDimensions = '6, 13'
	$formLazyWinAdmincom.AutoScaleMode = 'Font'
	$formLazyWinAdmincom.ClientSize = '284, 261'
	$formLazyWinAdmincom.Name = 'formLazyWinAdmincom'
	$formLazyWinAdmincom.Text = 'LazyWinAdmin.com'
	$formLazyWinAdmincom.add_Load($formLazyWinAdmincom_Load)
	#
	# button1
	#
	$button1.Location = '12, 226'
	$button1.Name = 'button1'
	$button1.Size = '75, 23'
	$button1.TabIndex = 1
	$button1.Text = 'button1'
	$button1.UseVisualStyleBackColor = $True
	$button1.add_Click($button1_Click)
	#
	# datagridview1
	#
	$datagridview1.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview1.Location = '12, 12'
	$datagridview1.Name = 'datagridview1'
	$datagridview1.Size = '240, 208'
	$datagridview1.TabIndex = 0
	$formLazyWinAdmincom.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formLazyWinAdmincom.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formLazyWinAdmincom.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formLazyWinAdmincom.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formLazyWinAdmincom.ShowDialog()

} #End Function

#Call the form
Call-DataGridView_AddColumn_psf | Out-Null

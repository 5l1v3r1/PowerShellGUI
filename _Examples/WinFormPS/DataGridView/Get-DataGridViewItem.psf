<File version="2">
  <FileID>f7c89b20-6eb8-46f5-8bd8-2bdd4e97df8f</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAACb1SURBVHhe7d15dN93nd/7GQrnnvmjc2YKMz30
tL13KO2UAcoQBhiGlk5nelnaTuhMIdyZQHIzCQGSEpZOwhYgBLIMJITsi504IasdJ3Ecb/EuW7Is
S7Yky5JlyfIiyZbkfc1CAu9+Pl/ZwbF/TuyJbeR+Hs9zHseJpN8mcfi8ftJPzq9JkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ0ulRRzL8
hje8YfhNb3zj8FlnnTX86U9/evgznzkn+QwAMGaNntX53H7zm988/PrXv344n+lJXz7gX7Ff//Vf
3/nbv/3b8ZEPfzg+97nPx4OPPBbtXeujZ/1IrFk3BACMUT3rh6O7b1MsrG+MSy+9LD76kY/Em970
pnjd6173swPH/NFLA2A4H/5XXXVtLG3tibrWvljUtj4WtwMAp4O6tnWxsmcwfnLjTfGxj30sXv/6
f7T3wDF/9N74xjcOX3DBhdHYuiYWr9wQC9MAWLBiLQBwGlmYRkBH72BcdtnX4p/+09999QHwyU98
YnjCfY+kZ/3rqmf/C/OVAACnnUXt62PBoqVx7rnnvvoAyC8c6OjeGPUdG6sBAACcnvKPAwa37I3P
fvbCVx8A55xzzvDGTdujYVV/9e2D/HMEAOD0k3+U3z+0My644LPHNgDWD2yNJWkA5AvnHwUAwPFY
fIrUuu2s1seeDLVuO6v1sSdDrds+VP1xDYDPjA6ApV2D1XLIFwaAY9HQsTEauwaiafXgKZFvK9/m
obe/9FTefufA6G23j97+klWn7vaXJo2d/S899lryk3kDAICTqiFZ0NwT9z+xOG6//+m444HZJ9Xt
98+OB6bUx4KW3urgX5LMaeyOCZMXnvTbz7ed/3xkemMsau2L+o7R8TGzflXcPXH+Kbj9dP0PzonJ
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
/vzP/zw+9KEPAQDHKZ+h8+bNixdeeKHmWXuoMTMAchMnTozf+q3fissvvzwuvfRSAOAYffe7343f
+Z3fibvuuqs6U2udtYcaMwPgF7/4RTUA3v72t8f8+fNj2rRpAMAxqqurizPOOCPGjRt3+g2ASZMm
xdve9rbqgTz66KMAwDGaOXNmvOtd74rx48cbAABQCgMAAApkAABAgQwAACiQAQAABTIAAKBABgAA
FMgAAIACGQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECB
DAAAKJABAAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgA
AIACGQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAA
KJABAAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIAC
GQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJAB
AAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIACGQAA
UCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJABAAAF
MgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIACGQAAUCAD
AAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJABAAAFMgAA
oEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIACGQAAUCADAAAK
ZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJABAAAFMgAAoEAG
AAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIACGQAAUCADAAAKZAAA
QIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJABAAAFMgAAoEAGAAAU
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
AQAABTIAAKBABgAAFMgAAIACGQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkA
AFAgAwAACmQAAECBDAAAKJABAAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAA
BTIAAKBABgAAFMgAAIACGQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAg
AwAACmQAAECBDAAAKJABAAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIA
AKBABgAAFMgAAIACGQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAA
CmQAAECBDAAAKJABAAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBA
BgAAFMgAAIACGQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQA
AECBDAAAKJABAAAFMgAAoECn/QAYN25cnHHGGVFfX189GADg1eVzM5+f+RzN1TpnDzXmBsCECRPi
da97Xbzvfe+Ld7/73QDAMcjnZj4/8zmaq3XOHmpMDYD9+/dHT09P3HvvvXHrrbfGbbfdBgAcg3xu
5vMzn6P5PK11zh5qTA2AnTt3VndakiT9w8rnaD5Pa52zhxpTAwAAODUMAAAokAEAAAUyAACgQAYA
ABTIAACAAhkAAFAgAwAACnTSB0C+8n17Rm8IABgb8tm86WQNgK50peuGdsfmrbtjEwAwZuSzOZ/R
+aw+9Ow+IQMg60ryugAAxpZ8Rh9+bp+wAQAAnD4MAAAokAEAAAU67gEwOLwz+rY8X10QADg99Q4/
F0Pb9h3bADj77LO3Dwxtj5Htz1SrAQA4PQ1t2x/DW/fEeef97XMHjvmjd+aZZ/adf/4Fe7O8GACA
09P55ycXfHbvxz/+8eEDx7wkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkjd1+7df+N13cJHURpzaLAAAAAElFTkSuQmCC</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="form1" children="Controls">
    <Property name="ClientSize">522, 382</Property>
    <Property name="Name">form1</Property>
    <Property name="Text">Form</Property>
    <Event name="Load">form1_Load</Event>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview2" children="Controls">
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="Location">13, 260</Property>
      <Property name="Name">datagridview2</Property>
      <Property name="Size">497, 110</Property>
      <Property name="TabIndex">5</Property>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonGet" children="Controls">
      <Property name="Location">109, 230</Property>
      <Property name="Name">buttonGet</Property>
      <Property name="Size">40, 23</Property>
      <Property name="TabIndex">4</Property>
      <Property name="Text">Get</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonGet_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.ComboBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="combobox1" children="Controls">
      <Property name="FormattingEnabled">True</Property>
      <Property name="Items">
        <Item type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">SelectedCell</Item>
        <Item type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">SelectedRowIndex</Item>
        <Item type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">SelectedColumnIndex</Item>
        <Item type="System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">SelectedRow</Item>
      </Property>
      <Property name="Location">12, 232</Property>
      <Property name="Name">combobox1</Property>
      <Property name="Size">91, 21</Property>
      <Property name="TabIndex">3</Property>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview1" children="Controls">
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="Location">12, 12</Property>
      <Property name="Name">datagridview1</Property>
      <Property name="Size">498, 214</Property>
      <Property name="TabIndex">0</Property>
    </Object>
  </Object>
  <Code><![CDATA[
$form1_Load = {
	# Add examples columns
	Add-DataGridViewColumn -DataGridView $datagridview1 -ColumnName "First Name", "Country"
	Add-DataGridViewRow -DataGridView $datagridview1 -Values "Francois-Xavier", "Canada"
	Add-DataGridViewRow -DataGridView $datagridview1 -Values "Dexter", "India"
	Add-DataGridViewRow -DataGridView $datagridview1 -Values "Stephane", "France"
}

#region Control Helper Functions
function Load-ComboBox 
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.

	.PARAMETER  ComboBox
		The ComboBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ComboBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ComboBox $combobox1 "Red" -Append
		Load-ComboBox $combobox1 "White" -Append
		Load-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Load-ComboBox $combobox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
	    [Parameter(Mandatory=$false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if(-not $Append)
	{
		$ComboBox.Items.Clear()	
	}
	
	if($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ComboBox.BeginUpdate()
		foreach($obj in $Items)
		{
			$ComboBox.Items.Add($obj)	
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)	
	}

	$ComboBox.DisplayMember = $DisplayMember	
}

function Load-ListBox 
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.

	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.

	.PARAMETER  ListBox
		The ListBox control you want to add items to.

	.PARAMETER  Items
		The object or objects you wish to load into the ListBox's Items collection.

	.PARAMETER  DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER  Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Load-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Load-ListBox $listBox1 "Red" -Append
		Load-ListBox $listBox1 "White" -Append
		Load-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Load-ListBox $listBox1 (Get-Process) "ProcessName"
#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListBox]$ListBox,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
	    [Parameter(Mandatory=$false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if(-not $Append)
	{
		$listBox.Items.Clear()	
	}
	
	if($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)	
	}

	$listBox.DisplayMember = $DisplayMember	
}

function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The ComboBox control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the ComboBox's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function Add-DataGridViewColumn
{
<#
.SYNOPSIS
	This function add a column to a DataGridView
.DESCRIPTION
	This function add a column to a DataGridView
.EXAMPLE
	Add-DataGridViewColumn -DataGridView $datagridview1 -ColumnName $($textbox1.Text -split "," -replace '^\s+', '' -replace '\s+$', '')
.EXAMPLE
	Add-DataGridViewColumn -DataGridView $datagridview1 -ColumnName "First Name","Last Name","SamAccountName","Description"
.NOTES
	Francois-Xavier Cat
	www.lazywinadmin.com
	@lazywinadm
#>
	PARAM (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[String[]]$ColumnName
	)
	
	foreach ($Column in $ColumnName)
	{
		
		# Create Column object
		$NewColumn = New-Object -TypeName System.Windows.Forms.DataGridViewTextBoxColumn
		$NewColumn.Name = $Column
		$NewColumn.HeaderText = $Column
		
		# Add the Column to the Datagridview
		$DataGridView.Columns.Add($NewColumn)
	}
}

function Add-DataGridViewRow
{
<#
.SYNOPSIS
	This function add a row to a DataGridView
.DESCRIPTION
	This function add a row to a DataGridView
.EXAMPLE
	Add-DataGridViewRow -DataGridView $datagridview1 -Values ($textbox1.Text -split ",")
.EXAMPLE
	Add-DataGridViewRow -DataGridView $datagridview1 -Values "Francois-Xavier","Cat","fxcat"
.NOTES
	Francois-Xavier Cat
	www.lazywinadmin.com
	@lazywinadm
#>
	PARAM (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[Array]$Values
	)
	# Add a row
	$DataGridView.Rows.Add($Values)
}#Function Add-DataGridViewRow
#endregion

function Add-DataGridViewCell
{
<#
.SYNOPSIS
	This function add a cell to a DataGridView
.DESCRIPTION
	This function add a cell to a DataGridView
.EXAMPLE
	dd
.NOTES
	Francois-Xavier Cat
	www.lazywinadmin.com
	@lazywinadm
#>
	PARAM (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[String]$ColumnName,
		[String]$Value
		
	)
	$NewCell = New-Object -TypeName System.Windows.Forms.DataGridViewCell
	$NewCell.Value = $Value
	$DataGridView.Rows
	# Add a row
	$DataGridView.Rows.Add($Values)
}#Function Add-DataGridViewRow
#endregion

function Get-DataGridViewItem
{
	<#
		Add Count
		Coordinate of the item (ROW index/Columnindex).value
	#>
	[CmdletBinding(DefaultParameterSetName = "CellAddress")]
	PARAM (
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		
		[Parameter(Mandatory = $true, ParameterSetName = "SelectedCell")]
		[Switch]$SelectedCell,
		
		[Parameter(Mandatory = $true, ParameterSetName = "SelectedRowIndex")]
		[Switch]$SelectedRowIndex,
		
		[Parameter(Mandatory = $true, ParameterSetName = "SelectedColumnIndex")]
		[Switch]$SelectedColumnIndex,
		
		[Parameter(Mandatory = $true, ParameterSetName = "SelectedRow")]
		[Switch]$SelectedRow,
		
		[Parameter(ParameterSetName = "SelectedRow")]
		[int]$ColumnNumber,
		
		[Parameter(ParameterSetName = "SelectedRow")]
		[String]$ColumnName,
		
		[Parameter(ParameterSetName = "SelectedRow")]
		[switch]$AllColumns
	)
	PROCESS
	{
		IF ($PSBoundParameters['SelectedCell'])
		{
			foreach ($SelectedCell in $datagridview1.SelectedCells)
			{
				New-Object -TypeName PSObject -Property @{
					RowIndex = $SelectedCell.RowIndex
					ColumnIndex = $SelectedCell.ColumnIndex
				}
			}
		}
		IF ($PSBoundParameters['SelectedRowIndex'])
		{
			foreach ($SelectedCell in $datagridview1.SelectedCells)
			{
				$SelectedCell.RowIndex
			}
		}
		IF ($PSBoundParameters['SelectedColumnIndex'])
		{
			foreach ($SelectedCell in $datagridview1.SelectedCells)
			{
				$SelectedCell.ColumnIndex
			}
		}
		IF ($PSBoundParameters['SelectedRow'])
		{
			
			
			#[System.Windows.Forms.DataGridViewRow]
			#foreach ($SelectedRow in
			
			if (-not ($PSboundparameters['All']))
			{
				foreach ($SelectedRow in $datagridview.SelectedRows)
				{
					IF ($PSboundparameters['ColumnNumber'])
					{
						
					}
					IF ($PSboundparameters['ColumnName'])
					{
						# Get the Selected row
						$SelectedRow.indexSelectedRows
						# Get the value for the $ColumnName of this row
						$DataGridView[$ColumnName][$d]
					}
					ELSE
					{
						$SelectedRow.value
					}
				}#foreach ($SelectedRow in $datagridview.SelectedCells)
			}#if (-not ($PSboundparameters['All'])
			if ($PSboundparameters['All'])
			{
				<#
			$SelectedRowCount = $DataGridView.Rows.GetRowCount('Selected')
			#$DisplayedRowCount = $DataGridView.Rows.GetRowCount('Displayed')
			if ($SelectedRowCount -gt 0)
			{
				IF ($PSboundparameters['ColumnNumber'])
				{
					for ([int]$i = 0, $i -gt $SelectedRowCount; $i++) { }
					$SelectedRow
					$datagridview1
					
				}
				if (-not ($PSboundparameters['ColumnNumber']) -and -not ($psboundparameter['AllColumns']))
				{
					$datagridview.SelectedRows[]
				}
			}
			#>
				
			}#if ($PSboundparameters['All'])
		}#IF ($PSBoundParameters['SelectedRow'])
	}#PROCESS
}

$buttonGet_Click = {
	#fail
	#$textbox1.Text = Get-DataGridViewItem -DataGridView $datagridview1 -SelectedColumnIndex
	
	#fail
	#$textbox1.Text = (Get-DataGridViewItem -DataGridView $datagridview1 -SelectedRowIndex)
	Load-DataGridView -DataGridView $datagridview2 -Item $(Get-DataGridViewItem -DataGridView $datagridview1 -SelectedRowIndex)
	
	#Load-DataGridView -DataGridView $datagridview2 -Item $(Get-DataGridViewItem -DataGridView $datagridview1 -SelectedCell)
	
	#works
	#Load-DataGridView -DataGridView $datagridview2 -Item $datagridview1.sele
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>
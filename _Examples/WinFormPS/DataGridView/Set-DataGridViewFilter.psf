<File version="2">
  <FileID>9896c257-b0da-42c8-929c-dd798f0bf2a9</FileID>
  <Preview>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
6QEgwX6QyBQtW7hcGWUCQFBkvJn5hzj6BYfJN+i0Y3BYuMIjq4xQRFSEQsIjKv9uAkNwVKKzvKt2
723NAFh4SellX5vZhx0cqx63g/BXSi3/TikFZqAyO+3K42aQSyr6xpmt2GLj/F78jSnCVc+xd3O7
qFTTZnym3S/lpjibduzs2Zy436+7SlN88752vvplPzRlTSs869zVr+rvto/JBefNLP2qftg72xXa
99ztoG8es0XSfiWuxH4Vr/J5ERkmGBR85bQXZV5DlEmzCYXfKtkEi+/X/712kLZ3n7OXy6v6knnG
rMMOzC6e/6O1fcsz/bim3e/MzNYElSvPq0zj9g53V55jt/9V282m8gQzG3b6V2SWNSn7mvVcZZTZ
LyZvXbU+q3nt9sY/V/az1WwrExgSTbuV67yklMLzzlfS7HaLrmrPPCfJtmf6lG6KX5QpprH5l2S6
5CyXYbZ7XN5F85rOO0X1+/ZLTLC8JJODruqHTOE3+9jO2O3Vl/xvzL40y1+9f+1xZWbnznF2uZ3o
7PNKrjpOyuznN86Z/fu10mxwvfwcR1N47fGRYfpq9/U1x535W2zBt+a4ttvv+8dj8uxnKb7vX7oJ
HHFZl48tpz/mmC41y+WZ1263nz327XHuPGZnbpXPs9sp8SbH2Pfngt1+5jEnAJvl7T650scyxRd9
6xT9TLMt7V017cAZY86R1Kv6l1HVP9MPe8UzuejiVdvv3jbabBP7dvDc5R4KiEw32++cU1QScyv+
Bp511ucfnuoEALv97aX1qisAyeZvSX/Dvthz4ERggnPznbicM849Ceat2O98HTgpr7Ifzoz7eu3y
V/3sWPVz1eM/waq+HDwZqcXrPc2E5bpz8rL2PEnMO/fjA0CbywHALmRPXidV38Rok4BizCBvk9C1
/97Myr9HmxPTVXvuob3VqR0kXT9u77/g6m+3+v3aNm/WTpVV66ryxr9f+3vVY7fqR+Vj17bnqv2r
vboflbp+3k/1xnZvtm1/+Dk3e/xGr23nVstd/xxXz73671f/XvXY1X+72qufV+W1f7/2+Td//MY2
rm+rysrn3Ph41d9cPXa1N/v7tY/f7LnX/n611z//x66r6jHXf6v06sfuXe2lbltMtngEacs+Px0+
FaWjfrE66vs30KzHrm/LXj9tNeu3291+7mbTXn9t8wjQEZ/ov1lfjtm+eEdp0x5f7Tgc6hRd+xbE
+t3m94NB8vSJ+Rv2JU4HvSK0YZeP9hyLMMHVhtwb952t4Un5ZoLxUwNAUp79lPn1JwEiIrqbMWbS
Zm/1vHl/oJZsOKqlG4/9zbTrs+EjPLnY6Uds5hmFJhRow27/v2lf7Lqs203xj0wtreyLKbyBMbla
u9Pn79IXW/yj7VVg0xdX+83W8OT8Cz89ANiF7EzdNoyIiO6tLXbxuWeVYC8p/42167Xrv7ov9m1q
V8+901b25artkv137EuOvbL+fV+u19bwlIK/JACYhaJtw9dpG0RERDfUFN6/m/TlRjOt3/fjhnpt
TCn8CwJASsFF08AZJ2ldbVLOGaXknlEyIiIi/t21NdnW5uvrta3hqYUXf0IAaN3mpgHA/l5YXKYz
5WUqL0NERMS/txWmJtva7KpmVwWAli1b/vUBoMCspNysrMysFBEREf++2km5rc0EAERERDeSAICI
iOiGEgAQERHdUAIAIiKiG0oAQEREdEMJAIiIiG4oAQAREdENJQAgIiK6oXdtAKioqNC5c+cQERHx
R3rmzBmXNdWVd20AKCoqUm5urrKyspSdnY2IiIg30dZKWzOLi4td1lRX3pUB4Ntvv9WXX36pBx98
UA899BAiIiLeQlszZ86c6dRQV7X1eu/KAGDp3bu3nnjiCc2fP19Tp05FRETEmzhv3jw9+uijGjRo
kFNDXdXW671rA0Dfvn311ltvycvLS3v27EFERMSbeOLECVWrVk2DBw92aqir2nq9d20A6Nevn15/
/XUdOnRIW7duRURExJt48OBBvfLKKxoyZIhTQ13V1uslACAiIv6DSwBARER0QwkAiIiIbigBABER
0Q0lACAiIrqhBABEREQ3lACAiIjohhIAEBER3VACACIiohtKAEBERHRDCQCIiIhuKAEAERHRDSUA
ICIiuqEEAERERDeUAICIiOiGEgAQERHdUAIAIiKiG0oAQEREdEMJAIiIiG4oAQAREdENJQAgIiK6
oQQAREREN5QAgIiI6IYSABAREd1QAgAiIqIbSgBARER0QwkAiIiIbigBABER0Q0lACAiIrqhBABE
REQ3lACAiIjohhIAEBER3VACACIiohtKAEBERHRDCQCIiIhuKAEAERHRDSUAICIiuqEEAERERDeU
AICIiOiGEgAQERHdUAIAIiKiG0oAQEREdEMJAIiIiG4oAQAREdENJQAgIiK6oQQAREREN5QAgIiI
6IYSABAREd1QAgAiIqIbSgBARER0QwkAiIiIbigBABER0Q0lACAiIrqhBABEREQ3lACAiIjohhIA
EBER3VACACIiohtKAEBERHRDCQCIiIhuKAEAERHRDSUAICIiuqEEAERERDeUAICIiOiGEgAQERHd
UAIAIiKiG0oAQEREdEMJAIiIiG4oAQAREdENJQAgIiK6oQQAREREN5QAgIiI6IYSABAREd1QAgAi
IqIbSgBARER0QwkAiIiIbigBABER0Q0lACAiIrqhBABEREQ3lACAiIjohhIAEBER3VACACIiohtK
AEBERHRDCQCIiIhuKAEAERHRDSUAICIiuqEEAERERDeUAICIiOiGEgAQERHdUAIAIiKiG0oAQERE
dEMJAIiIiG4oAQAREdENJQAgIiK6oQQAREREN5QAgIiI6IYSABAREd1QAgAiIqIbSgBARER0QwkA
iIiIbigBABER0Q0lACAiIrqhBABEREQ3lACAiIjohhIAEBER3VACACIiohtKAEBERHRDCQCIiIhu
KAEAERHRDSUAICIiuqEEAERERDeUAICIiOiGEgAQERHdUAIAIiKiG0oAQEREdEMJAIiIiG4oAQAR
EdENJQAgIiK6oQQAREREN5QAgIiI6IYSABAREd1QAgAiIqIbSgBARER0QwkAiIiIbigBABER0Q0l
ACAiIrqhBABEREQ3lACAiIjohhIAEBER3VACACIiohtKAEBERHRDCQCIiIhuKAEAERHRDSUAICIi
uqEEAERERDeUAICIiOiGEgAQERHdUAIAIiKiG0oAQEREdEMJAIiIiG4oAQAREdENJQAgIiK6oQQA
REREN5QAgIiI6IYSABAREd1QAgAiIqIbSgBARER0QwkAiIiIbigBABER0Q0lACAiIrqhBABEREQ3
lACAiIjohhIAEBER3VACACIiohtKAEBERHRDCQCIiIhuKAEAERHRDSUAICIiuqEEAERERDeUAICI
iOiGEgAQERHdUAIAIiKiG0oAQEREdEMJAIiIiG4oAQAREdENJQAgIiK6oQQAREREN5QAgIiI6IYS
ABAREd1QAgAiIqIbSgBARER0QwkAiIiIbigBABER0Q0lACAiIrqhBABEREQ3lACAiIjohhIAEBER
3VACACIiohtKAEBERHRDCQCIiIhuKAEAERHRDSUAICIiuqEEAERERDeUAICIiOiGEgAQERHdUAIA
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</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formWinFormPSSetDataGrid" children="Controls">
    <Property name="ClientSize">475, 239</Property>
    <Property name="Name">formWinFormPSSetDataGrid</Property>
    <Property name="Text">WinFormPS - Set-DataGridViewFilter</Property>
    <Event name="Load">formWinFormPSSetDataGrid_Load</Event>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonReset" children="Controls">
      <Property name="Location">388, 206</Property>
      <Property name="Name">buttonReset</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">3</Property>
      <Property name="Text">Reset</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonReset_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonFilter" children="Controls">
      <Property name="Location">118, 206</Property>
      <Property name="Name">buttonFilter</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">2</Property>
      <Property name="Text">Filter</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonFilter_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textbox1" children="Controls">
      <Property name="Location">12, 208</Property>
      <Property name="Name">textbox1</Property>
      <Property name="Size">100, 20</Property>
      <Property name="TabIndex">1</Property>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridview1" children="Controls">
      <Property name="ColumnHeadersHeightSizeMode">AutoSize</Property>
      <Property name="Location">12, 12</Property>
      <Property name="Name">datagridview1</Property>
      <Property name="RowHeadersVisible">False</Property>
      <Property name="Size">451, 190</Property>
      <Property name="TabIndex">0</Property>
    </Object>
  </Object>
  <Code><![CDATA[

function OnApplicationLoad {
	#Note: This function is not called in Projects
	#Note: This function runs before the form is created
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#Important: Form controls cannot be accessed in this function
	#TODO: Add modules and custom code to validate the application load
	
	return $true #return true for success or false for failure
}


function OnApplicationExit {
	#Note: This function is not called in Projects
	#Note: This function runs after the form is closed
	#TODO: Add custom code to clean up and unload modules when the application exits
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}

$formWinFormPSSetDataGrid_Load={
	#TODO: Initialize Form Controls here
	$Processes = Get-Process | Select-Object -Property Name,'path', fileversion
	$global:ProcessesDT = ConvertTo-DataTable -InputObject $Processes -RetainColumns
	#$ProcessesDT = $Processes | Out-DataTable
	
	Load-DataGridView -DataGridView $datagridview1 -Item $ProcessesDT
}
function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($Table -eq $null)
	{
		$Table = New-Object System.Data.DataTable
	}

	if($InputObject-is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	else
	{
		if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()

			if($InputObject -eq $null){ return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach($item in $InputObject)
			{
				if($item -ne $null)
				{
					$object = $item
					break	
				}
			}

			if($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if($prop.Value -ne $null)
					{
						try{ $type = $prop.Value.GetType() } catch {}
					}

					if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
		      			[void]$table.Columns.Add($prop.Name, $type) 
					}
					else #Type info not found
					{ 
						[void]$table.Columns.Add($prop.Name) 	
					}
				}
		    }
			
			if($object -is [System.Data.DataRow])
			{
				foreach($item in $InputObject)
				{	
					$Table.Rows.Add($item)
				}
				return  @(,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()	
		}
		
		foreach($item in $InputObject)
		{		
			$row = $table.NewRow()
			
			if($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}

	return @(,$Table)	
}
#region Control Helper Functions
function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The ComboBox control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the ComboBox's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{	
			$array.Add($Item)	
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function Set-DataGridViewFilter
{
	PARAM (
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[Parameter(Mandatory = $true)]
		[System.Data.DataTable]$DataTable,
		[Parameter(Mandatory = $true)]
		[String]$Filter,
		
		[Parameter(Mandatory = $true, ParameterSetName = "OneColumn")]
		[String]$ColumnName,
		[Parameter(Mandatory = $true, ParameterSetName = "AllColumns")]
		[Switch]$AllColumns
	)
	PROCESS
	{
		IF ($PSBoundParameters['AllColumns'])
		{
			FOREACH ($Column in $DataTable.Columns)
			{
				$RowFilter += "{0} Like '%{1}%' OR " -f $($Column.ColumnName), $Filter
			}
			
			# Remove the last 'OR'
			$RowFilter = $RowFilter -replace " OR $", ''
		}
		IF ($PSBoundParameters['ColumnName'])
		{
			$RowFilter = "$ColumnName LIKE '%$Filter%'"
		}
		
		$DataTable.defaultview.rowfilter = $RowFilter
		Load-DataGridView -DataGridView $DataGridView -Item $DataTable
	}
	END { Remove-Variable -Name $RowFilter -ErrorAction 'SilentlyContinue' | Out-Null }
}

#endregion

$buttonFilter_Click= {
	Set-DataGridViewFilter -DataGridView $datagridview1 -DataTable $ProcessesDT -AllColumn -Filter $textbox1.Text
	#Set-DataGridViewFilter -DataGridView $datagridview1 -DataTable $ProcessesDT -ColumnName "Name" -Filter $textbox1.Text
	
}

$buttonReset_Click={
	$formWinFormPSSetDataGrid_Load.invoke()
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies>
    <Assembly>System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  </Assemblies>
</File>